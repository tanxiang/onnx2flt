namespace nn;

struct versionInfo{
        codeversion:ulong;
        dataversion:long;
}

enum DataType:byte { Float, Int, QuantAsymm, QuantSymm, QuantSymmPerChannel}
enum FuseCode:byte { None, Relu, Relu1, Relu6 }

table Tensor {
            name:string(required);
            type:DataType;
            raw_data: [ubyte];
            dim: [ushort];
}

table QuantInfo {
    name: string(required);
    type: DataType;
    dim: ushort;
    scales: [float32];
    zero_point: int32;
}

table Input {
    name:string;
    dim: [ushort];
}

table Link{
    input: [string](required);
    output: [string](required);
    name: string;
}

table CONV_2D {
    link:Link (required);
    weight: string;
    bias: string;
    padding_left: int;
    padding_right: int;
    padding_top: int;
    padding_bottom: int;
    stride_x: int;
    stride_y: int;
    fuse_code: FuseCode;
    nchw: bool;
    dilation_x: int;
    dilation_y: int;

}

table AVERAGE_POOL_2D {
    link:Link (required);
    padding_left: int;
    padding_right: int;
    padding_top: int;
    padding_bottom: int;
    stride_x: int;
    stride_y: int;
    kernel_width: int;
    kernel_height: int;
    fuse_code: FuseCode;
}


table MAX_POOL_2D {
    link:Link (required);
    padding_left: int;
    padding_right: int;
    padding_top: int;
    padding_bottom: int;
    stride_x: int;
    stride_y: int;
    kernel_width: int;
    kernel_height: int;
    fuse_code: FuseCode;
}

table RELU {
    link:Link (required);
}

table SOFTMAX {
    link:Link (required);
    beta: float;
}

table FULLY_CONNECTED {
    link:Link (required);
    weight: string;
    bias: string;
    fuse_code: FuseCode;
}

table ADD {
    link:Link (required);
    fuse_code: FuseCode;
}


table CONCATENATION {
    link:Link (required);
    axis: int;
}

table DEPTHWISE_CONV_2D {
    link:Link (required);
    weight: string;
    bias: string;
    padding_left: int;
    padding_right: int;
    padding_top: int;
    padding_bottom: int;
    stride_x: int;
    stride_y: int;
    depth_multiplier: int;
    fuse_code: FuseCode;
}

table BATCH_TO_SPACE_ND {
    link:Link (required);
    block_sizes: [int];
}

table SPACE_TO_BATCH_ND {
    link:Link (required);
    block_sizes: [int];
    pads: [int];
}

table STRIDED_SLICE {
    link:Link (required);
    starts: [int];
    ends: [int];
    strides: [int];
    begin_mask: int;
    end_mask: int;
    shrink_axis_mask: int;
}

table MUL {
    link:Link (required);
    fuse_code: FuseCode;
}

table DEQUANTIZE {
    link:Link (required);
}

table LOCAL_RESPONSE_NORMALIZATION {
    link:Link (required);
    radius: int;
    bias: float;
    alpha: float;
    beta: float;
}

table TANH {
    link:Link (required);
}

table FLOOR {
    link:Link (required);
}

table LOGISTIC {
    link:Link (required);
}

table PRELU {
    link:Link (required);
    alpha: string;
}

table POW {
    link:Link (required);
    exp: string;
}

table NEG {
    link:Link (required);
}

table MINIMUM {
    link:Link (required);
}

table MAXIMUM {
    link:Link (required);
}

table LOG {
    link:Link (required);
}

table ABS {
    link:Link (required);
}

table EXP {
    link:Link (required);
}

table SUB {
    link:Link (required);
    fuse_code: FuseCode;
}

union Layer { 
CONV_2D,AVERAGE_POOL_2D,MAX_POOL_2D,RELU,SOFTMAX,FULLY_CONNECTED,
ADD,CONCATENATION,DEPTHWISE_CONV_2D,BATCH_TO_SPACE_ND,SPACE_TO_BATCH_ND,
STRIDED_SLICE,MUL,DEQUANTIZE,LOCAL_RESPONSE_NORMALIZATION,TANH,FLOOR,LOGISTIC,
PRELU,POW,NEG,MINIMUM,MAXIMUM,LOG,ABS,EXP,SUB
}

table Graph {
    version:versionInfo;
    node:[Layer];
    initializers:[Tensor];
    inputs:[Input];
    quant_infos:[QuantInfo];
    outputs:[string];
}

root_type Graph;

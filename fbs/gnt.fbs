namespace nn;

struct versionInfo{
    codeversion:ulong;
    dataversion:long;
}

enum DataType:byte { Float16,Float32,Float64, Int8,Int16,Int32,Int64, QuantAsymm, QuantSymm, QuantSymmPerChannel,Unknown}
enum FuseCode:byte { None ,Relu, Relu1, Relu6 }

table TensorInfo{
    name:string;
    dim: [ushort];
}

table RawTensor{
    info:TensorInfo;
    type: DataType;
    data :string;
}

struct I32Scalar{
    data:int;
}

struct U32Scalar{
    data:uint;
}

struct F32Scalar{
    data:float;
}

table I32Tensor{
    info:TensorInfo;
    data :[int];
}

table U32Tensor{
    info:TensorInfo;
    data :[uint];
}

table F16Tensor{
    info:TensorInfo;
    data :[ushort];
}

table F32Tensor{
    info:TensorInfo;
    data :[float];
}

table F64Tensor{
    info:TensorInfo;
    data :[double];
}


table QuantInfo {
    name: string(required);
    type: DataType;
    dim: ushort;
    scales: [float32];
    zero_point: int32;
}

struct DimValue{
    val:int;
}

table DimParam{
    name:string;
}
union Dim{
    DimValue,DimParam
}

table TensorShape {
    type: DataType;
    dims: [Dim];
}

table InputTensor {
    shape:TensorShape;
}

table LinkOd{
    input: [string](required);
    output: [string](required);
    name: string;
}

table Link{
    input: [uint](required);
    ext_output: [uint];
    name: string;
}

struct Pads{
    //dim:int = 4;
    //value:[int];
    left: int;
    right: int;
    top: int;
    bottom: int;
}

struct Stride{
    //dim:int = 2;
    //value:[int];
    x:int;
    y:int;
}

struct Dilation{
    //dim:int = 2;
    //value:[int];
    x:int;
    y:int;
}

struct KernelShape{
    width:int;
    height:int;
}

struct Group{
    id:int;
}

table CONV_2D {
    link:Link (required);
    padding: Pads;
    stride:Stride;
    dilation:Dilation;
    group:Group;
}

table AVERAGE_POOL_2D {
    link:Link (required);
    padding: Pads;
    stride:Stride;
    kernel_shape:KernelShape;
}


table MAX_POOL_2D {
    link:Link (required);
    padding: Pads;
    stride:Stride;
    kernel_shape:KernelShape;
}

table RELU {
    link:Link (required);
}

table SOFTMAX {
    link:Link (required);
    beta: float;
}

table FULLY_CONNECTED {
    link:Link (required);
    bias: float;
}

table ADD {
    link:Link (required);
}

table SUB {
    link:Link (required);
}

table MUL {
    link:Link (required);
}

table CONCATENATION {
    link:Link (required);
    axis: int;
}

table DEPTHWISE_CONV_2D {
    link:Link (required);
    padding: Pads;
    stride:Stride;
    depth_multiplier: int;
}

table BATCH_TO_SPACE_ND {
    link:Link (required);
    block_sizes: [int];
}

table SPACE_TO_BATCH_ND {
    link:Link (required);
    block_sizes: [int];
    padding: Pads;
//pads: [int];
}

table STRIDED_SLICE {
    link:Link (required);
    starts: [int];
    ends: [int];
    strides: [int];
    begin_mask: int;
    end_mask: int;
    shrink_axis_mask: int;
}


table DEQUANTIZE {
    link:Link (required);
}

table LOCAL_RESPONSE_NORMALIZATION {
    link:Link (required);
    radius: int;
    bias: float;
    alpha: float;
    beta: float;
}

table TANH {
    link:Link (required);
}

table FLOOR {
    link:Link (required);
}

table LOGISTIC {
    link:Link (required);
}

table PRELU {
    link:Link (required);
    alpha: string;
}

table POW {
    link:Link (required);
    exp: string;
}

table NEG {
    link:Link (required);
}

table MINIMUM {
    link:Link (required);
}

table MAXIMUM {
    link:Link (required);
}

table LOG {
    link:Link (required);
}

table ABS {
    link:Link (required);
}

table EXP {
    link:Link (required);
}

table GATHER {
    link:Link (required);
        axis: int;
}

table RESHAPE {
    link:Link (required);
    axes:[int];
}

table Configure {
    link:Link (required);
    gather_indices:[int];
    gather_axis:int;

    unsqueeze_axes:[int];
    concat_axis:int;
    concat:[int];
}

struct FuseNode{
    code:FuseCode;
}

union Layer {
    FuseNode,
    InputTensor,RawTensor,
    I32Scalar,U32Scalar,
    I32Tensor,U32Tensor,F16Tensor,F32Tensor,F64Tensor,
    
CONV_2D,AVERAGE_POOL_2D,MAX_POOL_2D,RELU,SOFTMAX,FULLY_CONNECTED,
ADD,CONCATENATION,DEPTHWISE_CONV_2D,BATCH_TO_SPACE_ND,SPACE_TO_BATCH_ND,
STRIDED_SLICE,MUL,DEQUANTIZE,LOCAL_RESPONSE_NORMALIZATION,TANH,FLOOR,LOGISTIC,
PRELU,POW,NEG,MINIMUM,MAXIMUM,LOG,ABS,EXP,SUB,GATHER,RESHAPE,
Configure
}

table Output{
    node_idx:int;
    shape:TensorShape;
}

table Graph {
    version:versionInfo;
    node:[Layer];
    outputs:[Output];
    quant_infos:[QuantInfo];
}

root_type Graph;

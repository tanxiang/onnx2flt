// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GNT_NN_H_
#define FLATBUFFERS_GENERATED_GNT_NN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 8,
             "Non-compatible flatbuffers version included");

namespace nn {

struct versionInfo;

struct Tensor;
struct TensorBuilder;

struct QuantInfo;
struct QuantInfoBuilder;

struct Input;
struct InputBuilder;

struct CONV_2D;
struct CONV_2DBuilder;

struct AVERAGE_POOL_2D;
struct AVERAGE_POOL_2DBuilder;

struct MAX_POOL_2D;
struct MAX_POOL_2DBuilder;

struct RELU;
struct RELUBuilder;

struct SOFTMAX;
struct SOFTMAXBuilder;

struct FULLY_CONNECTED;
struct FULLY_CONNECTEDBuilder;

struct ADD;
struct ADDBuilder;

struct CONCATENATION;
struct CONCATENATIONBuilder;

struct DEPTHWISE_CONV_2D;
struct DEPTHWISE_CONV_2DBuilder;

struct BATCH_TO_SPACE_ND;
struct BATCH_TO_SPACE_NDBuilder;

struct SPACE_TO_BATCH_ND;
struct SPACE_TO_BATCH_NDBuilder;

struct STRIDED_SLICE;
struct STRIDED_SLICEBuilder;

struct MUL;
struct MULBuilder;

struct DEQUANTIZE;
struct DEQUANTIZEBuilder;

struct LOCAL_RESPONSE_NORMALIZATION;
struct LOCAL_RESPONSE_NORMALIZATIONBuilder;

struct TANH;
struct TANHBuilder;

struct FLOOR;
struct FLOORBuilder;

struct LOGISTIC;
struct LOGISTICBuilder;

struct PRELU;
struct PRELUBuilder;

struct POW;
struct POWBuilder;

struct NEG;
struct NEGBuilder;

struct MINIMUM;
struct MINIMUMBuilder;

struct MAXIMUM;
struct MAXIMUMBuilder;

struct LOG;
struct LOGBuilder;

struct ABS;
struct ABSBuilder;

struct EXP;
struct EXPBuilder;

struct SUB;
struct SUBBuilder;

struct Graph;
struct GraphBuilder;

enum DataType : int8_t {
  DataType_Float = 0,
  DataType_Int = 1,
  DataType_QuantAsymm = 2,
  DataType_QuantSymm = 3,
  DataType_QuantSymmPerChannel = 4,
  DataType_MIN = DataType_Float,
  DataType_MAX = DataType_QuantSymmPerChannel
};

inline const DataType (&EnumValuesDataType())[5] {
  static const DataType values[] = {
    DataType_Float,
    DataType_Int,
    DataType_QuantAsymm,
    DataType_QuantSymm,
    DataType_QuantSymmPerChannel
  };
  return values;
}

inline const char * const *EnumNamesDataType() {
  static const char * const names[6] = {
    "Float",
    "Int",
    "QuantAsymm",
    "QuantSymm",
    "QuantSymmPerChannel",
    nullptr
  };
  return names;
}

inline const char *EnumNameDataType(DataType e) {
  if (flatbuffers::IsOutRange(e, DataType_Float, DataType_QuantSymmPerChannel)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesDataType()[index];
}

enum FuseCode : int8_t {
  FuseCode_None = 0,
  FuseCode_Relu = 1,
  FuseCode_Relu1 = 2,
  FuseCode_Relu6 = 3,
  FuseCode_MIN = FuseCode_None,
  FuseCode_MAX = FuseCode_Relu6
};

inline const FuseCode (&EnumValuesFuseCode())[4] {
  static const FuseCode values[] = {
    FuseCode_None,
    FuseCode_Relu,
    FuseCode_Relu1,
    FuseCode_Relu6
  };
  return values;
}

inline const char * const *EnumNamesFuseCode() {
  static const char * const names[5] = {
    "None",
    "Relu",
    "Relu1",
    "Relu6",
    nullptr
  };
  return names;
}

inline const char *EnumNameFuseCode(FuseCode e) {
  if (flatbuffers::IsOutRange(e, FuseCode_None, FuseCode_Relu6)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFuseCode()[index];
}

enum Layer : uint8_t {
  Layer_NONE = 0,
  Layer_CONV_2D = 1,
  Layer_AVERAGE_POOL_2D = 2,
  Layer_MAX_POOL_2D = 3,
  Layer_RELU = 4,
  Layer_SOFTMAX = 5,
  Layer_FULLY_CONNECTED = 6,
  Layer_ADD = 7,
  Layer_CONCATENATION = 8,
  Layer_DEPTHWISE_CONV_2D = 9,
  Layer_BATCH_TO_SPACE_ND = 10,
  Layer_SPACE_TO_BATCH_ND = 11,
  Layer_STRIDED_SLICE = 12,
  Layer_MUL = 13,
  Layer_DEQUANTIZE = 14,
  Layer_LOCAL_RESPONSE_NORMALIZATION = 15,
  Layer_TANH = 16,
  Layer_FLOOR = 17,
  Layer_LOGISTIC = 18,
  Layer_PRELU = 19,
  Layer_POW = 20,
  Layer_NEG = 21,
  Layer_MINIMUM = 22,
  Layer_MAXIMUM = 23,
  Layer_LOG = 24,
  Layer_ABS = 25,
  Layer_EXP = 26,
  Layer_SUB = 27,
  Layer_MIN = Layer_NONE,
  Layer_MAX = Layer_SUB
};

inline const Layer (&EnumValuesLayer())[28] {
  static const Layer values[] = {
    Layer_NONE,
    Layer_CONV_2D,
    Layer_AVERAGE_POOL_2D,
    Layer_MAX_POOL_2D,
    Layer_RELU,
    Layer_SOFTMAX,
    Layer_FULLY_CONNECTED,
    Layer_ADD,
    Layer_CONCATENATION,
    Layer_DEPTHWISE_CONV_2D,
    Layer_BATCH_TO_SPACE_ND,
    Layer_SPACE_TO_BATCH_ND,
    Layer_STRIDED_SLICE,
    Layer_MUL,
    Layer_DEQUANTIZE,
    Layer_LOCAL_RESPONSE_NORMALIZATION,
    Layer_TANH,
    Layer_FLOOR,
    Layer_LOGISTIC,
    Layer_PRELU,
    Layer_POW,
    Layer_NEG,
    Layer_MINIMUM,
    Layer_MAXIMUM,
    Layer_LOG,
    Layer_ABS,
    Layer_EXP,
    Layer_SUB
  };
  return values;
}

inline const char * const *EnumNamesLayer() {
  static const char * const names[29] = {
    "NONE",
    "CONV_2D",
    "AVERAGE_POOL_2D",
    "MAX_POOL_2D",
    "RELU",
    "SOFTMAX",
    "FULLY_CONNECTED",
    "ADD",
    "CONCATENATION",
    "DEPTHWISE_CONV_2D",
    "BATCH_TO_SPACE_ND",
    "SPACE_TO_BATCH_ND",
    "STRIDED_SLICE",
    "MUL",
    "DEQUANTIZE",
    "LOCAL_RESPONSE_NORMALIZATION",
    "TANH",
    "FLOOR",
    "LOGISTIC",
    "PRELU",
    "POW",
    "NEG",
    "MINIMUM",
    "MAXIMUM",
    "LOG",
    "ABS",
    "EXP",
    "SUB",
    nullptr
  };
  return names;
}

inline const char *EnumNameLayer(Layer e) {
  if (flatbuffers::IsOutRange(e, Layer_NONE, Layer_SUB)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesLayer()[index];
}

template<typename T> struct LayerTraits {
  static const Layer enum_value = Layer_NONE;
};

template<> struct LayerTraits<nn::CONV_2D> {
  static const Layer enum_value = Layer_CONV_2D;
};

template<> struct LayerTraits<nn::AVERAGE_POOL_2D> {
  static const Layer enum_value = Layer_AVERAGE_POOL_2D;
};

template<> struct LayerTraits<nn::MAX_POOL_2D> {
  static const Layer enum_value = Layer_MAX_POOL_2D;
};

template<> struct LayerTraits<nn::RELU> {
  static const Layer enum_value = Layer_RELU;
};

template<> struct LayerTraits<nn::SOFTMAX> {
  static const Layer enum_value = Layer_SOFTMAX;
};

template<> struct LayerTraits<nn::FULLY_CONNECTED> {
  static const Layer enum_value = Layer_FULLY_CONNECTED;
};

template<> struct LayerTraits<nn::ADD> {
  static const Layer enum_value = Layer_ADD;
};

template<> struct LayerTraits<nn::CONCATENATION> {
  static const Layer enum_value = Layer_CONCATENATION;
};

template<> struct LayerTraits<nn::DEPTHWISE_CONV_2D> {
  static const Layer enum_value = Layer_DEPTHWISE_CONV_2D;
};

template<> struct LayerTraits<nn::BATCH_TO_SPACE_ND> {
  static const Layer enum_value = Layer_BATCH_TO_SPACE_ND;
};

template<> struct LayerTraits<nn::SPACE_TO_BATCH_ND> {
  static const Layer enum_value = Layer_SPACE_TO_BATCH_ND;
};

template<> struct LayerTraits<nn::STRIDED_SLICE> {
  static const Layer enum_value = Layer_STRIDED_SLICE;
};

template<> struct LayerTraits<nn::MUL> {
  static const Layer enum_value = Layer_MUL;
};

template<> struct LayerTraits<nn::DEQUANTIZE> {
  static const Layer enum_value = Layer_DEQUANTIZE;
};

template<> struct LayerTraits<nn::LOCAL_RESPONSE_NORMALIZATION> {
  static const Layer enum_value = Layer_LOCAL_RESPONSE_NORMALIZATION;
};

template<> struct LayerTraits<nn::TANH> {
  static const Layer enum_value = Layer_TANH;
};

template<> struct LayerTraits<nn::FLOOR> {
  static const Layer enum_value = Layer_FLOOR;
};

template<> struct LayerTraits<nn::LOGISTIC> {
  static const Layer enum_value = Layer_LOGISTIC;
};

template<> struct LayerTraits<nn::PRELU> {
  static const Layer enum_value = Layer_PRELU;
};

template<> struct LayerTraits<nn::POW> {
  static const Layer enum_value = Layer_POW;
};

template<> struct LayerTraits<nn::NEG> {
  static const Layer enum_value = Layer_NEG;
};

template<> struct LayerTraits<nn::MINIMUM> {
  static const Layer enum_value = Layer_MINIMUM;
};

template<> struct LayerTraits<nn::MAXIMUM> {
  static const Layer enum_value = Layer_MAXIMUM;
};

template<> struct LayerTraits<nn::LOG> {
  static const Layer enum_value = Layer_LOG;
};

template<> struct LayerTraits<nn::ABS> {
  static const Layer enum_value = Layer_ABS;
};

template<> struct LayerTraits<nn::EXP> {
  static const Layer enum_value = Layer_EXP;
};

template<> struct LayerTraits<nn::SUB> {
  static const Layer enum_value = Layer_SUB;
};

bool VerifyLayer(flatbuffers::Verifier &verifier, const void *obj, Layer type);
bool VerifyLayerVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) versionInfo FLATBUFFERS_FINAL_CLASS {
 private:
  uint64_t codeversion_;
  uint64_t dataversion_;

 public:
  versionInfo()
      : codeversion_(0),
        dataversion_(0) {
  }
  versionInfo(uint64_t _codeversion, uint64_t _dataversion)
      : codeversion_(flatbuffers::EndianScalar(_codeversion)),
        dataversion_(flatbuffers::EndianScalar(_dataversion)) {
  }
  uint64_t codeversion() const {
    return flatbuffers::EndianScalar(codeversion_);
  }
  uint64_t dataversion() const {
    return flatbuffers::EndianScalar(dataversion_);
  }
};
FLATBUFFERS_STRUCT_END(versionInfo, 16);

struct Tensor FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TensorBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_TYPE = 6,
    VT_RAW_DATA = 8,
    VT_DIM = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  nn::DataType type() const {
    return static_cast<nn::DataType>(GetField<int8_t>(VT_TYPE, 0));
  }
  const flatbuffers::Vector<uint8_t> *raw_data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_RAW_DATA);
  }
  const flatbuffers::Vector<uint16_t> *dim() const {
    return GetPointer<const flatbuffers::Vector<uint16_t> *>(VT_DIM);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           VerifyOffset(verifier, VT_RAW_DATA) &&
           verifier.VerifyVector(raw_data()) &&
           VerifyOffset(verifier, VT_DIM) &&
           verifier.VerifyVector(dim()) &&
           verifier.EndTable();
  }
};

struct TensorBuilder {
  typedef Tensor Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Tensor::VT_NAME, name);
  }
  void add_type(nn::DataType type) {
    fbb_.AddElement<int8_t>(Tensor::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_raw_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> raw_data) {
    fbb_.AddOffset(Tensor::VT_RAW_DATA, raw_data);
  }
  void add_dim(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> dim) {
    fbb_.AddOffset(Tensor::VT_DIM, dim);
  }
  explicit TensorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Tensor> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Tensor>(end);
    return o;
  }
};

inline flatbuffers::Offset<Tensor> CreateTensor(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    nn::DataType type = nn::DataType_Float,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> raw_data = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint16_t>> dim = 0) {
  TensorBuilder builder_(_fbb);
  builder_.add_dim(dim);
  builder_.add_raw_data(raw_data);
  builder_.add_name(name);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Tensor> CreateTensorDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    nn::DataType type = nn::DataType_Float,
    const std::vector<uint8_t> *raw_data = nullptr,
    const std::vector<uint16_t> *dim = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto raw_data__ = raw_data ? _fbb.CreateVector<uint8_t>(*raw_data) : 0;
  auto dim__ = dim ? _fbb.CreateVector<uint16_t>(*dim) : 0;
  return nn::CreateTensor(
      _fbb,
      name__,
      type,
      raw_data__,
      dim__);
}

struct QuantInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef QuantInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_TYPE = 6,
    VT_DIM = 8,
    VT_SCALES = 10,
    VT_ZERO_POINT = 12
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  nn::DataType type() const {
    return static_cast<nn::DataType>(GetField<int8_t>(VT_TYPE, 0));
  }
  uint16_t dim() const {
    return GetField<uint16_t>(VT_DIM, 0);
  }
  const flatbuffers::Vector<float> *scales() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALES);
  }
  int32_t zero_point() const {
    return GetField<int32_t>(VT_ZERO_POINT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           VerifyField<uint16_t>(verifier, VT_DIM, 2) &&
           VerifyOffset(verifier, VT_SCALES) &&
           verifier.VerifyVector(scales()) &&
           VerifyField<int32_t>(verifier, VT_ZERO_POINT, 4) &&
           verifier.EndTable();
  }
};

struct QuantInfoBuilder {
  typedef QuantInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(QuantInfo::VT_NAME, name);
  }
  void add_type(nn::DataType type) {
    fbb_.AddElement<int8_t>(QuantInfo::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_dim(uint16_t dim) {
    fbb_.AddElement<uint16_t>(QuantInfo::VT_DIM, dim, 0);
  }
  void add_scales(flatbuffers::Offset<flatbuffers::Vector<float>> scales) {
    fbb_.AddOffset(QuantInfo::VT_SCALES, scales);
  }
  void add_zero_point(int32_t zero_point) {
    fbb_.AddElement<int32_t>(QuantInfo::VT_ZERO_POINT, zero_point, 0);
  }
  explicit QuantInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<QuantInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<QuantInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<QuantInfo> CreateQuantInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    nn::DataType type = nn::DataType_Float,
    uint16_t dim = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> scales = 0,
    int32_t zero_point = 0) {
  QuantInfoBuilder builder_(_fbb);
  builder_.add_zero_point(zero_point);
  builder_.add_scales(scales);
  builder_.add_name(name);
  builder_.add_dim(dim);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<QuantInfo> CreateQuantInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    nn::DataType type = nn::DataType_Float,
    uint16_t dim = 0,
    const std::vector<float> *scales = nullptr,
    int32_t zero_point = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto scales__ = scales ? _fbb.CreateVector<float>(*scales) : 0;
  return nn::CreateQuantInfo(
      _fbb,
      name__,
      type,
      dim,
      scales__,
      zero_point);
}

struct Input FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef InputBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_DIM = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<uint16_t> *dim() const {
    return GetPointer<const flatbuffers::Vector<uint16_t> *>(VT_DIM);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_DIM) &&
           verifier.VerifyVector(dim()) &&
           verifier.EndTable();
  }
};

struct InputBuilder {
  typedef Input Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Input::VT_NAME, name);
  }
  void add_dim(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> dim) {
    fbb_.AddOffset(Input::VT_DIM, dim);
  }
  explicit InputBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Input> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Input>(end);
    return o;
  }
};

inline flatbuffers::Offset<Input> CreateInput(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint16_t>> dim = 0) {
  InputBuilder builder_(_fbb);
  builder_.add_dim(dim);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Input> CreateInputDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<uint16_t> *dim = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto dim__ = dim ? _fbb.CreateVector<uint16_t>(*dim) : 0;
  return nn::CreateInput(
      _fbb,
      name__,
      dim__);
}

struct CONV_2D FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CONV_2DBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT = 4,
    VT_OUTPUT = 6,
    VT_NAME = 8,
    VT_WEIGHT = 10,
    VT_BIAS = 12,
    VT_PADDING_LEFT = 14,
    VT_PADDING_RIGHT = 16,
    VT_PADDING_TOP = 18,
    VT_PADDING_BOTTOM = 20,
    VT_STRIDE_X = 22,
    VT_STRIDE_Y = 24,
    VT_FUSE_CODE = 26,
    VT_NCHW = 28,
    VT_DILATION_X = 30,
    VT_DILATION_Y = 32
  };
  const flatbuffers::String *input() const {
    return GetPointer<const flatbuffers::String *>(VT_INPUT);
  }
  const flatbuffers::String *output() const {
    return GetPointer<const flatbuffers::String *>(VT_OUTPUT);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *weight() const {
    return GetPointer<const flatbuffers::String *>(VT_WEIGHT);
  }
  const flatbuffers::String *bias() const {
    return GetPointer<const flatbuffers::String *>(VT_BIAS);
  }
  int32_t padding_left() const {
    return GetField<int32_t>(VT_PADDING_LEFT, 0);
  }
  int32_t padding_right() const {
    return GetField<int32_t>(VT_PADDING_RIGHT, 0);
  }
  int32_t padding_top() const {
    return GetField<int32_t>(VT_PADDING_TOP, 0);
  }
  int32_t padding_bottom() const {
    return GetField<int32_t>(VT_PADDING_BOTTOM, 0);
  }
  int32_t stride_x() const {
    return GetField<int32_t>(VT_STRIDE_X, 0);
  }
  int32_t stride_y() const {
    return GetField<int32_t>(VT_STRIDE_Y, 0);
  }
  nn::FuseCode fuse_code() const {
    return static_cast<nn::FuseCode>(GetField<int8_t>(VT_FUSE_CODE, 0));
  }
  bool nchw() const {
    return GetField<uint8_t>(VT_NCHW, 0) != 0;
  }
  int32_t dilation_x() const {
    return GetField<int32_t>(VT_DILATION_X, 0);
  }
  int32_t dilation_y() const {
    return GetField<int32_t>(VT_DILATION_Y, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_INPUT) &&
           verifier.VerifyString(input()) &&
           VerifyOffsetRequired(verifier, VT_OUTPUT) &&
           verifier.VerifyString(output()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_WEIGHT) &&
           verifier.VerifyString(weight()) &&
           VerifyOffset(verifier, VT_BIAS) &&
           verifier.VerifyString(bias()) &&
           VerifyField<int32_t>(verifier, VT_PADDING_LEFT, 4) &&
           VerifyField<int32_t>(verifier, VT_PADDING_RIGHT, 4) &&
           VerifyField<int32_t>(verifier, VT_PADDING_TOP, 4) &&
           VerifyField<int32_t>(verifier, VT_PADDING_BOTTOM, 4) &&
           VerifyField<int32_t>(verifier, VT_STRIDE_X, 4) &&
           VerifyField<int32_t>(verifier, VT_STRIDE_Y, 4) &&
           VerifyField<int8_t>(verifier, VT_FUSE_CODE, 1) &&
           VerifyField<uint8_t>(verifier, VT_NCHW, 1) &&
           VerifyField<int32_t>(verifier, VT_DILATION_X, 4) &&
           VerifyField<int32_t>(verifier, VT_DILATION_Y, 4) &&
           verifier.EndTable();
  }
};

struct CONV_2DBuilder {
  typedef CONV_2D Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_input(flatbuffers::Offset<flatbuffers::String> input) {
    fbb_.AddOffset(CONV_2D::VT_INPUT, input);
  }
  void add_output(flatbuffers::Offset<flatbuffers::String> output) {
    fbb_.AddOffset(CONV_2D::VT_OUTPUT, output);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(CONV_2D::VT_NAME, name);
  }
  void add_weight(flatbuffers::Offset<flatbuffers::String> weight) {
    fbb_.AddOffset(CONV_2D::VT_WEIGHT, weight);
  }
  void add_bias(flatbuffers::Offset<flatbuffers::String> bias) {
    fbb_.AddOffset(CONV_2D::VT_BIAS, bias);
  }
  void add_padding_left(int32_t padding_left) {
    fbb_.AddElement<int32_t>(CONV_2D::VT_PADDING_LEFT, padding_left, 0);
  }
  void add_padding_right(int32_t padding_right) {
    fbb_.AddElement<int32_t>(CONV_2D::VT_PADDING_RIGHT, padding_right, 0);
  }
  void add_padding_top(int32_t padding_top) {
    fbb_.AddElement<int32_t>(CONV_2D::VT_PADDING_TOP, padding_top, 0);
  }
  void add_padding_bottom(int32_t padding_bottom) {
    fbb_.AddElement<int32_t>(CONV_2D::VT_PADDING_BOTTOM, padding_bottom, 0);
  }
  void add_stride_x(int32_t stride_x) {
    fbb_.AddElement<int32_t>(CONV_2D::VT_STRIDE_X, stride_x, 0);
  }
  void add_stride_y(int32_t stride_y) {
    fbb_.AddElement<int32_t>(CONV_2D::VT_STRIDE_Y, stride_y, 0);
  }
  void add_fuse_code(nn::FuseCode fuse_code) {
    fbb_.AddElement<int8_t>(CONV_2D::VT_FUSE_CODE, static_cast<int8_t>(fuse_code), 0);
  }
  void add_nchw(bool nchw) {
    fbb_.AddElement<uint8_t>(CONV_2D::VT_NCHW, static_cast<uint8_t>(nchw), 0);
  }
  void add_dilation_x(int32_t dilation_x) {
    fbb_.AddElement<int32_t>(CONV_2D::VT_DILATION_X, dilation_x, 0);
  }
  void add_dilation_y(int32_t dilation_y) {
    fbb_.AddElement<int32_t>(CONV_2D::VT_DILATION_Y, dilation_y, 0);
  }
  explicit CONV_2DBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CONV_2D> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CONV_2D>(end);
    fbb_.Required(o, CONV_2D::VT_INPUT);
    fbb_.Required(o, CONV_2D::VT_OUTPUT);
    return o;
  }
};

inline flatbuffers::Offset<CONV_2D> CreateCONV_2D(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> input = 0,
    flatbuffers::Offset<flatbuffers::String> output = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> weight = 0,
    flatbuffers::Offset<flatbuffers::String> bias = 0,
    int32_t padding_left = 0,
    int32_t padding_right = 0,
    int32_t padding_top = 0,
    int32_t padding_bottom = 0,
    int32_t stride_x = 0,
    int32_t stride_y = 0,
    nn::FuseCode fuse_code = nn::FuseCode_None,
    bool nchw = false,
    int32_t dilation_x = 0,
    int32_t dilation_y = 0) {
  CONV_2DBuilder builder_(_fbb);
  builder_.add_dilation_y(dilation_y);
  builder_.add_dilation_x(dilation_x);
  builder_.add_stride_y(stride_y);
  builder_.add_stride_x(stride_x);
  builder_.add_padding_bottom(padding_bottom);
  builder_.add_padding_top(padding_top);
  builder_.add_padding_right(padding_right);
  builder_.add_padding_left(padding_left);
  builder_.add_bias(bias);
  builder_.add_weight(weight);
  builder_.add_name(name);
  builder_.add_output(output);
  builder_.add_input(input);
  builder_.add_nchw(nchw);
  builder_.add_fuse_code(fuse_code);
  return builder_.Finish();
}

inline flatbuffers::Offset<CONV_2D> CreateCONV_2DDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *input = nullptr,
    const char *output = nullptr,
    const char *name = nullptr,
    const char *weight = nullptr,
    const char *bias = nullptr,
    int32_t padding_left = 0,
    int32_t padding_right = 0,
    int32_t padding_top = 0,
    int32_t padding_bottom = 0,
    int32_t stride_x = 0,
    int32_t stride_y = 0,
    nn::FuseCode fuse_code = nn::FuseCode_None,
    bool nchw = false,
    int32_t dilation_x = 0,
    int32_t dilation_y = 0) {
  auto input__ = input ? _fbb.CreateString(input) : 0;
  auto output__ = output ? _fbb.CreateString(output) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto weight__ = weight ? _fbb.CreateString(weight) : 0;
  auto bias__ = bias ? _fbb.CreateString(bias) : 0;
  return nn::CreateCONV_2D(
      _fbb,
      input__,
      output__,
      name__,
      weight__,
      bias__,
      padding_left,
      padding_right,
      padding_top,
      padding_bottom,
      stride_x,
      stride_y,
      fuse_code,
      nchw,
      dilation_x,
      dilation_y);
}

struct AVERAGE_POOL_2D FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AVERAGE_POOL_2DBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT = 4,
    VT_OUTPUT = 6,
    VT_NAME = 8,
    VT_PADDING_LEFT = 10,
    VT_PADDING_RIGHT = 12,
    VT_PADDING_TOP = 14,
    VT_PADDING_BOTTOM = 16,
    VT_STRIDE_X = 18,
    VT_STRIDE_Y = 20,
    VT_KERNEL_WIDTH = 22,
    VT_KERNEL_HEIGHT = 24,
    VT_FUSE_CODE = 26
  };
  const flatbuffers::String *input() const {
    return GetPointer<const flatbuffers::String *>(VT_INPUT);
  }
  const flatbuffers::String *output() const {
    return GetPointer<const flatbuffers::String *>(VT_OUTPUT);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int32_t padding_left() const {
    return GetField<int32_t>(VT_PADDING_LEFT, 0);
  }
  int32_t padding_right() const {
    return GetField<int32_t>(VT_PADDING_RIGHT, 0);
  }
  int32_t padding_top() const {
    return GetField<int32_t>(VT_PADDING_TOP, 0);
  }
  int32_t padding_bottom() const {
    return GetField<int32_t>(VT_PADDING_BOTTOM, 0);
  }
  int32_t stride_x() const {
    return GetField<int32_t>(VT_STRIDE_X, 0);
  }
  int32_t stride_y() const {
    return GetField<int32_t>(VT_STRIDE_Y, 0);
  }
  int32_t kernel_width() const {
    return GetField<int32_t>(VT_KERNEL_WIDTH, 0);
  }
  int32_t kernel_height() const {
    return GetField<int32_t>(VT_KERNEL_HEIGHT, 0);
  }
  nn::FuseCode fuse_code() const {
    return static_cast<nn::FuseCode>(GetField<int8_t>(VT_FUSE_CODE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_INPUT) &&
           verifier.VerifyString(input()) &&
           VerifyOffsetRequired(verifier, VT_OUTPUT) &&
           verifier.VerifyString(output()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int32_t>(verifier, VT_PADDING_LEFT, 4) &&
           VerifyField<int32_t>(verifier, VT_PADDING_RIGHT, 4) &&
           VerifyField<int32_t>(verifier, VT_PADDING_TOP, 4) &&
           VerifyField<int32_t>(verifier, VT_PADDING_BOTTOM, 4) &&
           VerifyField<int32_t>(verifier, VT_STRIDE_X, 4) &&
           VerifyField<int32_t>(verifier, VT_STRIDE_Y, 4) &&
           VerifyField<int32_t>(verifier, VT_KERNEL_WIDTH, 4) &&
           VerifyField<int32_t>(verifier, VT_KERNEL_HEIGHT, 4) &&
           VerifyField<int8_t>(verifier, VT_FUSE_CODE, 1) &&
           verifier.EndTable();
  }
};

struct AVERAGE_POOL_2DBuilder {
  typedef AVERAGE_POOL_2D Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_input(flatbuffers::Offset<flatbuffers::String> input) {
    fbb_.AddOffset(AVERAGE_POOL_2D::VT_INPUT, input);
  }
  void add_output(flatbuffers::Offset<flatbuffers::String> output) {
    fbb_.AddOffset(AVERAGE_POOL_2D::VT_OUTPUT, output);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(AVERAGE_POOL_2D::VT_NAME, name);
  }
  void add_padding_left(int32_t padding_left) {
    fbb_.AddElement<int32_t>(AVERAGE_POOL_2D::VT_PADDING_LEFT, padding_left, 0);
  }
  void add_padding_right(int32_t padding_right) {
    fbb_.AddElement<int32_t>(AVERAGE_POOL_2D::VT_PADDING_RIGHT, padding_right, 0);
  }
  void add_padding_top(int32_t padding_top) {
    fbb_.AddElement<int32_t>(AVERAGE_POOL_2D::VT_PADDING_TOP, padding_top, 0);
  }
  void add_padding_bottom(int32_t padding_bottom) {
    fbb_.AddElement<int32_t>(AVERAGE_POOL_2D::VT_PADDING_BOTTOM, padding_bottom, 0);
  }
  void add_stride_x(int32_t stride_x) {
    fbb_.AddElement<int32_t>(AVERAGE_POOL_2D::VT_STRIDE_X, stride_x, 0);
  }
  void add_stride_y(int32_t stride_y) {
    fbb_.AddElement<int32_t>(AVERAGE_POOL_2D::VT_STRIDE_Y, stride_y, 0);
  }
  void add_kernel_width(int32_t kernel_width) {
    fbb_.AddElement<int32_t>(AVERAGE_POOL_2D::VT_KERNEL_WIDTH, kernel_width, 0);
  }
  void add_kernel_height(int32_t kernel_height) {
    fbb_.AddElement<int32_t>(AVERAGE_POOL_2D::VT_KERNEL_HEIGHT, kernel_height, 0);
  }
  void add_fuse_code(nn::FuseCode fuse_code) {
    fbb_.AddElement<int8_t>(AVERAGE_POOL_2D::VT_FUSE_CODE, static_cast<int8_t>(fuse_code), 0);
  }
  explicit AVERAGE_POOL_2DBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<AVERAGE_POOL_2D> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AVERAGE_POOL_2D>(end);
    fbb_.Required(o, AVERAGE_POOL_2D::VT_INPUT);
    fbb_.Required(o, AVERAGE_POOL_2D::VT_OUTPUT);
    return o;
  }
};

inline flatbuffers::Offset<AVERAGE_POOL_2D> CreateAVERAGE_POOL_2D(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> input = 0,
    flatbuffers::Offset<flatbuffers::String> output = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int32_t padding_left = 0,
    int32_t padding_right = 0,
    int32_t padding_top = 0,
    int32_t padding_bottom = 0,
    int32_t stride_x = 0,
    int32_t stride_y = 0,
    int32_t kernel_width = 0,
    int32_t kernel_height = 0,
    nn::FuseCode fuse_code = nn::FuseCode_None) {
  AVERAGE_POOL_2DBuilder builder_(_fbb);
  builder_.add_kernel_height(kernel_height);
  builder_.add_kernel_width(kernel_width);
  builder_.add_stride_y(stride_y);
  builder_.add_stride_x(stride_x);
  builder_.add_padding_bottom(padding_bottom);
  builder_.add_padding_top(padding_top);
  builder_.add_padding_right(padding_right);
  builder_.add_padding_left(padding_left);
  builder_.add_name(name);
  builder_.add_output(output);
  builder_.add_input(input);
  builder_.add_fuse_code(fuse_code);
  return builder_.Finish();
}

inline flatbuffers::Offset<AVERAGE_POOL_2D> CreateAVERAGE_POOL_2DDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *input = nullptr,
    const char *output = nullptr,
    const char *name = nullptr,
    int32_t padding_left = 0,
    int32_t padding_right = 0,
    int32_t padding_top = 0,
    int32_t padding_bottom = 0,
    int32_t stride_x = 0,
    int32_t stride_y = 0,
    int32_t kernel_width = 0,
    int32_t kernel_height = 0,
    nn::FuseCode fuse_code = nn::FuseCode_None) {
  auto input__ = input ? _fbb.CreateString(input) : 0;
  auto output__ = output ? _fbb.CreateString(output) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return nn::CreateAVERAGE_POOL_2D(
      _fbb,
      input__,
      output__,
      name__,
      padding_left,
      padding_right,
      padding_top,
      padding_bottom,
      stride_x,
      stride_y,
      kernel_width,
      kernel_height,
      fuse_code);
}

struct MAX_POOL_2D FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MAX_POOL_2DBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT = 4,
    VT_OUTPUT = 6,
    VT_NAME = 8,
    VT_PADDING_LEFT = 10,
    VT_PADDING_RIGHT = 12,
    VT_PADDING_TOP = 14,
    VT_PADDING_BOTTOM = 16,
    VT_STRIDE_X = 18,
    VT_STRIDE_Y = 20,
    VT_KERNEL_WIDTH = 22,
    VT_KERNEL_HEIGHT = 24,
    VT_FUSE_CODE = 26
  };
  const flatbuffers::String *input() const {
    return GetPointer<const flatbuffers::String *>(VT_INPUT);
  }
  const flatbuffers::String *output() const {
    return GetPointer<const flatbuffers::String *>(VT_OUTPUT);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int32_t padding_left() const {
    return GetField<int32_t>(VT_PADDING_LEFT, 0);
  }
  int32_t padding_right() const {
    return GetField<int32_t>(VT_PADDING_RIGHT, 0);
  }
  int32_t padding_top() const {
    return GetField<int32_t>(VT_PADDING_TOP, 0);
  }
  int32_t padding_bottom() const {
    return GetField<int32_t>(VT_PADDING_BOTTOM, 0);
  }
  int32_t stride_x() const {
    return GetField<int32_t>(VT_STRIDE_X, 0);
  }
  int32_t stride_y() const {
    return GetField<int32_t>(VT_STRIDE_Y, 0);
  }
  int32_t kernel_width() const {
    return GetField<int32_t>(VT_KERNEL_WIDTH, 0);
  }
  int32_t kernel_height() const {
    return GetField<int32_t>(VT_KERNEL_HEIGHT, 0);
  }
  nn::FuseCode fuse_code() const {
    return static_cast<nn::FuseCode>(GetField<int8_t>(VT_FUSE_CODE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_INPUT) &&
           verifier.VerifyString(input()) &&
           VerifyOffsetRequired(verifier, VT_OUTPUT) &&
           verifier.VerifyString(output()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int32_t>(verifier, VT_PADDING_LEFT, 4) &&
           VerifyField<int32_t>(verifier, VT_PADDING_RIGHT, 4) &&
           VerifyField<int32_t>(verifier, VT_PADDING_TOP, 4) &&
           VerifyField<int32_t>(verifier, VT_PADDING_BOTTOM, 4) &&
           VerifyField<int32_t>(verifier, VT_STRIDE_X, 4) &&
           VerifyField<int32_t>(verifier, VT_STRIDE_Y, 4) &&
           VerifyField<int32_t>(verifier, VT_KERNEL_WIDTH, 4) &&
           VerifyField<int32_t>(verifier, VT_KERNEL_HEIGHT, 4) &&
           VerifyField<int8_t>(verifier, VT_FUSE_CODE, 1) &&
           verifier.EndTable();
  }
};

struct MAX_POOL_2DBuilder {
  typedef MAX_POOL_2D Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_input(flatbuffers::Offset<flatbuffers::String> input) {
    fbb_.AddOffset(MAX_POOL_2D::VT_INPUT, input);
  }
  void add_output(flatbuffers::Offset<flatbuffers::String> output) {
    fbb_.AddOffset(MAX_POOL_2D::VT_OUTPUT, output);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(MAX_POOL_2D::VT_NAME, name);
  }
  void add_padding_left(int32_t padding_left) {
    fbb_.AddElement<int32_t>(MAX_POOL_2D::VT_PADDING_LEFT, padding_left, 0);
  }
  void add_padding_right(int32_t padding_right) {
    fbb_.AddElement<int32_t>(MAX_POOL_2D::VT_PADDING_RIGHT, padding_right, 0);
  }
  void add_padding_top(int32_t padding_top) {
    fbb_.AddElement<int32_t>(MAX_POOL_2D::VT_PADDING_TOP, padding_top, 0);
  }
  void add_padding_bottom(int32_t padding_bottom) {
    fbb_.AddElement<int32_t>(MAX_POOL_2D::VT_PADDING_BOTTOM, padding_bottom, 0);
  }
  void add_stride_x(int32_t stride_x) {
    fbb_.AddElement<int32_t>(MAX_POOL_2D::VT_STRIDE_X, stride_x, 0);
  }
  void add_stride_y(int32_t stride_y) {
    fbb_.AddElement<int32_t>(MAX_POOL_2D::VT_STRIDE_Y, stride_y, 0);
  }
  void add_kernel_width(int32_t kernel_width) {
    fbb_.AddElement<int32_t>(MAX_POOL_2D::VT_KERNEL_WIDTH, kernel_width, 0);
  }
  void add_kernel_height(int32_t kernel_height) {
    fbb_.AddElement<int32_t>(MAX_POOL_2D::VT_KERNEL_HEIGHT, kernel_height, 0);
  }
  void add_fuse_code(nn::FuseCode fuse_code) {
    fbb_.AddElement<int8_t>(MAX_POOL_2D::VT_FUSE_CODE, static_cast<int8_t>(fuse_code), 0);
  }
  explicit MAX_POOL_2DBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<MAX_POOL_2D> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MAX_POOL_2D>(end);
    fbb_.Required(o, MAX_POOL_2D::VT_INPUT);
    fbb_.Required(o, MAX_POOL_2D::VT_OUTPUT);
    return o;
  }
};

inline flatbuffers::Offset<MAX_POOL_2D> CreateMAX_POOL_2D(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> input = 0,
    flatbuffers::Offset<flatbuffers::String> output = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int32_t padding_left = 0,
    int32_t padding_right = 0,
    int32_t padding_top = 0,
    int32_t padding_bottom = 0,
    int32_t stride_x = 0,
    int32_t stride_y = 0,
    int32_t kernel_width = 0,
    int32_t kernel_height = 0,
    nn::FuseCode fuse_code = nn::FuseCode_None) {
  MAX_POOL_2DBuilder builder_(_fbb);
  builder_.add_kernel_height(kernel_height);
  builder_.add_kernel_width(kernel_width);
  builder_.add_stride_y(stride_y);
  builder_.add_stride_x(stride_x);
  builder_.add_padding_bottom(padding_bottom);
  builder_.add_padding_top(padding_top);
  builder_.add_padding_right(padding_right);
  builder_.add_padding_left(padding_left);
  builder_.add_name(name);
  builder_.add_output(output);
  builder_.add_input(input);
  builder_.add_fuse_code(fuse_code);
  return builder_.Finish();
}

inline flatbuffers::Offset<MAX_POOL_2D> CreateMAX_POOL_2DDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *input = nullptr,
    const char *output = nullptr,
    const char *name = nullptr,
    int32_t padding_left = 0,
    int32_t padding_right = 0,
    int32_t padding_top = 0,
    int32_t padding_bottom = 0,
    int32_t stride_x = 0,
    int32_t stride_y = 0,
    int32_t kernel_width = 0,
    int32_t kernel_height = 0,
    nn::FuseCode fuse_code = nn::FuseCode_None) {
  auto input__ = input ? _fbb.CreateString(input) : 0;
  auto output__ = output ? _fbb.CreateString(output) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return nn::CreateMAX_POOL_2D(
      _fbb,
      input__,
      output__,
      name__,
      padding_left,
      padding_right,
      padding_top,
      padding_bottom,
      stride_x,
      stride_y,
      kernel_width,
      kernel_height,
      fuse_code);
}

struct RELU FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RELUBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT = 4,
    VT_OUTPUT = 6,
    VT_NAME = 8
  };
  const flatbuffers::String *input() const {
    return GetPointer<const flatbuffers::String *>(VT_INPUT);
  }
  const flatbuffers::String *output() const {
    return GetPointer<const flatbuffers::String *>(VT_OUTPUT);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_INPUT) &&
           verifier.VerifyString(input()) &&
           VerifyOffsetRequired(verifier, VT_OUTPUT) &&
           verifier.VerifyString(output()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct RELUBuilder {
  typedef RELU Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_input(flatbuffers::Offset<flatbuffers::String> input) {
    fbb_.AddOffset(RELU::VT_INPUT, input);
  }
  void add_output(flatbuffers::Offset<flatbuffers::String> output) {
    fbb_.AddOffset(RELU::VT_OUTPUT, output);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(RELU::VT_NAME, name);
  }
  explicit RELUBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<RELU> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RELU>(end);
    fbb_.Required(o, RELU::VT_INPUT);
    fbb_.Required(o, RELU::VT_OUTPUT);
    return o;
  }
};

inline flatbuffers::Offset<RELU> CreateRELU(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> input = 0,
    flatbuffers::Offset<flatbuffers::String> output = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  RELUBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_output(output);
  builder_.add_input(input);
  return builder_.Finish();
}

inline flatbuffers::Offset<RELU> CreateRELUDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *input = nullptr,
    const char *output = nullptr,
    const char *name = nullptr) {
  auto input__ = input ? _fbb.CreateString(input) : 0;
  auto output__ = output ? _fbb.CreateString(output) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return nn::CreateRELU(
      _fbb,
      input__,
      output__,
      name__);
}

struct SOFTMAX FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SOFTMAXBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT = 4,
    VT_OUTPUT = 6,
    VT_NAME = 8,
    VT_BETA = 10
  };
  const flatbuffers::String *input() const {
    return GetPointer<const flatbuffers::String *>(VT_INPUT);
  }
  const flatbuffers::String *output() const {
    return GetPointer<const flatbuffers::String *>(VT_OUTPUT);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  float beta() const {
    return GetField<float>(VT_BETA, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_INPUT) &&
           verifier.VerifyString(input()) &&
           VerifyOffsetRequired(verifier, VT_OUTPUT) &&
           verifier.VerifyString(output()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<float>(verifier, VT_BETA, 4) &&
           verifier.EndTable();
  }
};

struct SOFTMAXBuilder {
  typedef SOFTMAX Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_input(flatbuffers::Offset<flatbuffers::String> input) {
    fbb_.AddOffset(SOFTMAX::VT_INPUT, input);
  }
  void add_output(flatbuffers::Offset<flatbuffers::String> output) {
    fbb_.AddOffset(SOFTMAX::VT_OUTPUT, output);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(SOFTMAX::VT_NAME, name);
  }
  void add_beta(float beta) {
    fbb_.AddElement<float>(SOFTMAX::VT_BETA, beta, 0.0f);
  }
  explicit SOFTMAXBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SOFTMAX> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SOFTMAX>(end);
    fbb_.Required(o, SOFTMAX::VT_INPUT);
    fbb_.Required(o, SOFTMAX::VT_OUTPUT);
    return o;
  }
};

inline flatbuffers::Offset<SOFTMAX> CreateSOFTMAX(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> input = 0,
    flatbuffers::Offset<flatbuffers::String> output = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    float beta = 0.0f) {
  SOFTMAXBuilder builder_(_fbb);
  builder_.add_beta(beta);
  builder_.add_name(name);
  builder_.add_output(output);
  builder_.add_input(input);
  return builder_.Finish();
}

inline flatbuffers::Offset<SOFTMAX> CreateSOFTMAXDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *input = nullptr,
    const char *output = nullptr,
    const char *name = nullptr,
    float beta = 0.0f) {
  auto input__ = input ? _fbb.CreateString(input) : 0;
  auto output__ = output ? _fbb.CreateString(output) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return nn::CreateSOFTMAX(
      _fbb,
      input__,
      output__,
      name__,
      beta);
}

struct FULLY_CONNECTED FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FULLY_CONNECTEDBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT = 4,
    VT_OUTPUT = 6,
    VT_NAME = 8,
    VT_WEIGHT = 10,
    VT_BIAS = 12,
    VT_FUSE_CODE = 14
  };
  const flatbuffers::String *input() const {
    return GetPointer<const flatbuffers::String *>(VT_INPUT);
  }
  const flatbuffers::String *output() const {
    return GetPointer<const flatbuffers::String *>(VT_OUTPUT);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *weight() const {
    return GetPointer<const flatbuffers::String *>(VT_WEIGHT);
  }
  const flatbuffers::String *bias() const {
    return GetPointer<const flatbuffers::String *>(VT_BIAS);
  }
  nn::FuseCode fuse_code() const {
    return static_cast<nn::FuseCode>(GetField<int8_t>(VT_FUSE_CODE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_INPUT) &&
           verifier.VerifyString(input()) &&
           VerifyOffsetRequired(verifier, VT_OUTPUT) &&
           verifier.VerifyString(output()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_WEIGHT) &&
           verifier.VerifyString(weight()) &&
           VerifyOffset(verifier, VT_BIAS) &&
           verifier.VerifyString(bias()) &&
           VerifyField<int8_t>(verifier, VT_FUSE_CODE, 1) &&
           verifier.EndTable();
  }
};

struct FULLY_CONNECTEDBuilder {
  typedef FULLY_CONNECTED Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_input(flatbuffers::Offset<flatbuffers::String> input) {
    fbb_.AddOffset(FULLY_CONNECTED::VT_INPUT, input);
  }
  void add_output(flatbuffers::Offset<flatbuffers::String> output) {
    fbb_.AddOffset(FULLY_CONNECTED::VT_OUTPUT, output);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(FULLY_CONNECTED::VT_NAME, name);
  }
  void add_weight(flatbuffers::Offset<flatbuffers::String> weight) {
    fbb_.AddOffset(FULLY_CONNECTED::VT_WEIGHT, weight);
  }
  void add_bias(flatbuffers::Offset<flatbuffers::String> bias) {
    fbb_.AddOffset(FULLY_CONNECTED::VT_BIAS, bias);
  }
  void add_fuse_code(nn::FuseCode fuse_code) {
    fbb_.AddElement<int8_t>(FULLY_CONNECTED::VT_FUSE_CODE, static_cast<int8_t>(fuse_code), 0);
  }
  explicit FULLY_CONNECTEDBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FULLY_CONNECTED> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FULLY_CONNECTED>(end);
    fbb_.Required(o, FULLY_CONNECTED::VT_INPUT);
    fbb_.Required(o, FULLY_CONNECTED::VT_OUTPUT);
    return o;
  }
};

inline flatbuffers::Offset<FULLY_CONNECTED> CreateFULLY_CONNECTED(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> input = 0,
    flatbuffers::Offset<flatbuffers::String> output = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> weight = 0,
    flatbuffers::Offset<flatbuffers::String> bias = 0,
    nn::FuseCode fuse_code = nn::FuseCode_None) {
  FULLY_CONNECTEDBuilder builder_(_fbb);
  builder_.add_bias(bias);
  builder_.add_weight(weight);
  builder_.add_name(name);
  builder_.add_output(output);
  builder_.add_input(input);
  builder_.add_fuse_code(fuse_code);
  return builder_.Finish();
}

inline flatbuffers::Offset<FULLY_CONNECTED> CreateFULLY_CONNECTEDDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *input = nullptr,
    const char *output = nullptr,
    const char *name = nullptr,
    const char *weight = nullptr,
    const char *bias = nullptr,
    nn::FuseCode fuse_code = nn::FuseCode_None) {
  auto input__ = input ? _fbb.CreateString(input) : 0;
  auto output__ = output ? _fbb.CreateString(output) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto weight__ = weight ? _fbb.CreateString(weight) : 0;
  auto bias__ = bias ? _fbb.CreateString(bias) : 0;
  return nn::CreateFULLY_CONNECTED(
      _fbb,
      input__,
      output__,
      name__,
      weight__,
      bias__,
      fuse_code);
}

struct ADD FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ADDBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT = 4,
    VT_OUTPUT = 6,
    VT_NAME = 8,
    VT_FUSE_CODE = 10
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *input() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_INPUT);
  }
  const flatbuffers::String *output() const {
    return GetPointer<const flatbuffers::String *>(VT_OUTPUT);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  nn::FuseCode fuse_code() const {
    return static_cast<nn::FuseCode>(GetField<int8_t>(VT_FUSE_CODE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_INPUT) &&
           verifier.VerifyVector(input()) &&
           verifier.VerifyVectorOfStrings(input()) &&
           VerifyOffsetRequired(verifier, VT_OUTPUT) &&
           verifier.VerifyString(output()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int8_t>(verifier, VT_FUSE_CODE, 1) &&
           verifier.EndTable();
  }
};

struct ADDBuilder {
  typedef ADD Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_input(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> input) {
    fbb_.AddOffset(ADD::VT_INPUT, input);
  }
  void add_output(flatbuffers::Offset<flatbuffers::String> output) {
    fbb_.AddOffset(ADD::VT_OUTPUT, output);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(ADD::VT_NAME, name);
  }
  void add_fuse_code(nn::FuseCode fuse_code) {
    fbb_.AddElement<int8_t>(ADD::VT_FUSE_CODE, static_cast<int8_t>(fuse_code), 0);
  }
  explicit ADDBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ADD> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ADD>(end);
    fbb_.Required(o, ADD::VT_INPUT);
    fbb_.Required(o, ADD::VT_OUTPUT);
    return o;
  }
};

inline flatbuffers::Offset<ADD> CreateADD(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> input = 0,
    flatbuffers::Offset<flatbuffers::String> output = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    nn::FuseCode fuse_code = nn::FuseCode_None) {
  ADDBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_output(output);
  builder_.add_input(input);
  builder_.add_fuse_code(fuse_code);
  return builder_.Finish();
}

inline flatbuffers::Offset<ADD> CreateADDDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *input = nullptr,
    const char *output = nullptr,
    const char *name = nullptr,
    nn::FuseCode fuse_code = nn::FuseCode_None) {
  auto input__ = input ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*input) : 0;
  auto output__ = output ? _fbb.CreateString(output) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return nn::CreateADD(
      _fbb,
      input__,
      output__,
      name__,
      fuse_code);
}

struct CONCATENATION FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CONCATENATIONBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT = 4,
    VT_OUTPUT = 6,
    VT_NAME = 8,
    VT_AXIS = 10
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *input() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_INPUT);
  }
  const flatbuffers::String *output() const {
    return GetPointer<const flatbuffers::String *>(VT_OUTPUT);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int32_t axis() const {
    return GetField<int32_t>(VT_AXIS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INPUT) &&
           verifier.VerifyVector(input()) &&
           verifier.VerifyVectorOfStrings(input()) &&
           VerifyOffsetRequired(verifier, VT_OUTPUT) &&
           verifier.VerifyString(output()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int32_t>(verifier, VT_AXIS, 4) &&
           verifier.EndTable();
  }
};

struct CONCATENATIONBuilder {
  typedef CONCATENATION Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_input(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> input) {
    fbb_.AddOffset(CONCATENATION::VT_INPUT, input);
  }
  void add_output(flatbuffers::Offset<flatbuffers::String> output) {
    fbb_.AddOffset(CONCATENATION::VT_OUTPUT, output);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(CONCATENATION::VT_NAME, name);
  }
  void add_axis(int32_t axis) {
    fbb_.AddElement<int32_t>(CONCATENATION::VT_AXIS, axis, 0);
  }
  explicit CONCATENATIONBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CONCATENATION> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CONCATENATION>(end);
    fbb_.Required(o, CONCATENATION::VT_OUTPUT);
    return o;
  }
};

inline flatbuffers::Offset<CONCATENATION> CreateCONCATENATION(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> input = 0,
    flatbuffers::Offset<flatbuffers::String> output = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int32_t axis = 0) {
  CONCATENATIONBuilder builder_(_fbb);
  builder_.add_axis(axis);
  builder_.add_name(name);
  builder_.add_output(output);
  builder_.add_input(input);
  return builder_.Finish();
}

inline flatbuffers::Offset<CONCATENATION> CreateCONCATENATIONDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *input = nullptr,
    const char *output = nullptr,
    const char *name = nullptr,
    int32_t axis = 0) {
  auto input__ = input ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*input) : 0;
  auto output__ = output ? _fbb.CreateString(output) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return nn::CreateCONCATENATION(
      _fbb,
      input__,
      output__,
      name__,
      axis);
}

struct DEPTHWISE_CONV_2D FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DEPTHWISE_CONV_2DBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT = 4,
    VT_OUTPUT = 6,
    VT_NAME = 8,
    VT_WEIGHT = 10,
    VT_BIAS = 12,
    VT_PADDING_LEFT = 14,
    VT_PADDING_RIGHT = 16,
    VT_PADDING_TOP = 18,
    VT_PADDING_BOTTOM = 20,
    VT_STRIDE_X = 22,
    VT_STRIDE_Y = 24,
    VT_DEPTH_MULTIPLIER = 26,
    VT_FUSE_CODE = 28
  };
  const flatbuffers::String *input() const {
    return GetPointer<const flatbuffers::String *>(VT_INPUT);
  }
  const flatbuffers::String *output() const {
    return GetPointer<const flatbuffers::String *>(VT_OUTPUT);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *weight() const {
    return GetPointer<const flatbuffers::String *>(VT_WEIGHT);
  }
  const flatbuffers::String *bias() const {
    return GetPointer<const flatbuffers::String *>(VT_BIAS);
  }
  int32_t padding_left() const {
    return GetField<int32_t>(VT_PADDING_LEFT, 0);
  }
  int32_t padding_right() const {
    return GetField<int32_t>(VT_PADDING_RIGHT, 0);
  }
  int32_t padding_top() const {
    return GetField<int32_t>(VT_PADDING_TOP, 0);
  }
  int32_t padding_bottom() const {
    return GetField<int32_t>(VT_PADDING_BOTTOM, 0);
  }
  int32_t stride_x() const {
    return GetField<int32_t>(VT_STRIDE_X, 0);
  }
  int32_t stride_y() const {
    return GetField<int32_t>(VT_STRIDE_Y, 0);
  }
  int32_t depth_multiplier() const {
    return GetField<int32_t>(VT_DEPTH_MULTIPLIER, 0);
  }
  nn::FuseCode fuse_code() const {
    return static_cast<nn::FuseCode>(GetField<int8_t>(VT_FUSE_CODE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_INPUT) &&
           verifier.VerifyString(input()) &&
           VerifyOffsetRequired(verifier, VT_OUTPUT) &&
           verifier.VerifyString(output()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_WEIGHT) &&
           verifier.VerifyString(weight()) &&
           VerifyOffset(verifier, VT_BIAS) &&
           verifier.VerifyString(bias()) &&
           VerifyField<int32_t>(verifier, VT_PADDING_LEFT, 4) &&
           VerifyField<int32_t>(verifier, VT_PADDING_RIGHT, 4) &&
           VerifyField<int32_t>(verifier, VT_PADDING_TOP, 4) &&
           VerifyField<int32_t>(verifier, VT_PADDING_BOTTOM, 4) &&
           VerifyField<int32_t>(verifier, VT_STRIDE_X, 4) &&
           VerifyField<int32_t>(verifier, VT_STRIDE_Y, 4) &&
           VerifyField<int32_t>(verifier, VT_DEPTH_MULTIPLIER, 4) &&
           VerifyField<int8_t>(verifier, VT_FUSE_CODE, 1) &&
           verifier.EndTable();
  }
};

struct DEPTHWISE_CONV_2DBuilder {
  typedef DEPTHWISE_CONV_2D Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_input(flatbuffers::Offset<flatbuffers::String> input) {
    fbb_.AddOffset(DEPTHWISE_CONV_2D::VT_INPUT, input);
  }
  void add_output(flatbuffers::Offset<flatbuffers::String> output) {
    fbb_.AddOffset(DEPTHWISE_CONV_2D::VT_OUTPUT, output);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(DEPTHWISE_CONV_2D::VT_NAME, name);
  }
  void add_weight(flatbuffers::Offset<flatbuffers::String> weight) {
    fbb_.AddOffset(DEPTHWISE_CONV_2D::VT_WEIGHT, weight);
  }
  void add_bias(flatbuffers::Offset<flatbuffers::String> bias) {
    fbb_.AddOffset(DEPTHWISE_CONV_2D::VT_BIAS, bias);
  }
  void add_padding_left(int32_t padding_left) {
    fbb_.AddElement<int32_t>(DEPTHWISE_CONV_2D::VT_PADDING_LEFT, padding_left, 0);
  }
  void add_padding_right(int32_t padding_right) {
    fbb_.AddElement<int32_t>(DEPTHWISE_CONV_2D::VT_PADDING_RIGHT, padding_right, 0);
  }
  void add_padding_top(int32_t padding_top) {
    fbb_.AddElement<int32_t>(DEPTHWISE_CONV_2D::VT_PADDING_TOP, padding_top, 0);
  }
  void add_padding_bottom(int32_t padding_bottom) {
    fbb_.AddElement<int32_t>(DEPTHWISE_CONV_2D::VT_PADDING_BOTTOM, padding_bottom, 0);
  }
  void add_stride_x(int32_t stride_x) {
    fbb_.AddElement<int32_t>(DEPTHWISE_CONV_2D::VT_STRIDE_X, stride_x, 0);
  }
  void add_stride_y(int32_t stride_y) {
    fbb_.AddElement<int32_t>(DEPTHWISE_CONV_2D::VT_STRIDE_Y, stride_y, 0);
  }
  void add_depth_multiplier(int32_t depth_multiplier) {
    fbb_.AddElement<int32_t>(DEPTHWISE_CONV_2D::VT_DEPTH_MULTIPLIER, depth_multiplier, 0);
  }
  void add_fuse_code(nn::FuseCode fuse_code) {
    fbb_.AddElement<int8_t>(DEPTHWISE_CONV_2D::VT_FUSE_CODE, static_cast<int8_t>(fuse_code), 0);
  }
  explicit DEPTHWISE_CONV_2DBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DEPTHWISE_CONV_2D> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DEPTHWISE_CONV_2D>(end);
    fbb_.Required(o, DEPTHWISE_CONV_2D::VT_INPUT);
    fbb_.Required(o, DEPTHWISE_CONV_2D::VT_OUTPUT);
    return o;
  }
};

inline flatbuffers::Offset<DEPTHWISE_CONV_2D> CreateDEPTHWISE_CONV_2D(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> input = 0,
    flatbuffers::Offset<flatbuffers::String> output = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> weight = 0,
    flatbuffers::Offset<flatbuffers::String> bias = 0,
    int32_t padding_left = 0,
    int32_t padding_right = 0,
    int32_t padding_top = 0,
    int32_t padding_bottom = 0,
    int32_t stride_x = 0,
    int32_t stride_y = 0,
    int32_t depth_multiplier = 0,
    nn::FuseCode fuse_code = nn::FuseCode_None) {
  DEPTHWISE_CONV_2DBuilder builder_(_fbb);
  builder_.add_depth_multiplier(depth_multiplier);
  builder_.add_stride_y(stride_y);
  builder_.add_stride_x(stride_x);
  builder_.add_padding_bottom(padding_bottom);
  builder_.add_padding_top(padding_top);
  builder_.add_padding_right(padding_right);
  builder_.add_padding_left(padding_left);
  builder_.add_bias(bias);
  builder_.add_weight(weight);
  builder_.add_name(name);
  builder_.add_output(output);
  builder_.add_input(input);
  builder_.add_fuse_code(fuse_code);
  return builder_.Finish();
}

inline flatbuffers::Offset<DEPTHWISE_CONV_2D> CreateDEPTHWISE_CONV_2DDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *input = nullptr,
    const char *output = nullptr,
    const char *name = nullptr,
    const char *weight = nullptr,
    const char *bias = nullptr,
    int32_t padding_left = 0,
    int32_t padding_right = 0,
    int32_t padding_top = 0,
    int32_t padding_bottom = 0,
    int32_t stride_x = 0,
    int32_t stride_y = 0,
    int32_t depth_multiplier = 0,
    nn::FuseCode fuse_code = nn::FuseCode_None) {
  auto input__ = input ? _fbb.CreateString(input) : 0;
  auto output__ = output ? _fbb.CreateString(output) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto weight__ = weight ? _fbb.CreateString(weight) : 0;
  auto bias__ = bias ? _fbb.CreateString(bias) : 0;
  return nn::CreateDEPTHWISE_CONV_2D(
      _fbb,
      input__,
      output__,
      name__,
      weight__,
      bias__,
      padding_left,
      padding_right,
      padding_top,
      padding_bottom,
      stride_x,
      stride_y,
      depth_multiplier,
      fuse_code);
}

struct BATCH_TO_SPACE_ND FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef BATCH_TO_SPACE_NDBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT = 4,
    VT_OUTPUT = 6,
    VT_NAME = 8,
    VT_BLOCK_SIZES = 10
  };
  const flatbuffers::String *input() const {
    return GetPointer<const flatbuffers::String *>(VT_INPUT);
  }
  const flatbuffers::String *output() const {
    return GetPointer<const flatbuffers::String *>(VT_OUTPUT);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<int32_t> *block_sizes() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_BLOCK_SIZES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_INPUT) &&
           verifier.VerifyString(input()) &&
           VerifyOffsetRequired(verifier, VT_OUTPUT) &&
           verifier.VerifyString(output()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_BLOCK_SIZES) &&
           verifier.VerifyVector(block_sizes()) &&
           verifier.EndTable();
  }
};

struct BATCH_TO_SPACE_NDBuilder {
  typedef BATCH_TO_SPACE_ND Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_input(flatbuffers::Offset<flatbuffers::String> input) {
    fbb_.AddOffset(BATCH_TO_SPACE_ND::VT_INPUT, input);
  }
  void add_output(flatbuffers::Offset<flatbuffers::String> output) {
    fbb_.AddOffset(BATCH_TO_SPACE_ND::VT_OUTPUT, output);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(BATCH_TO_SPACE_ND::VT_NAME, name);
  }
  void add_block_sizes(flatbuffers::Offset<flatbuffers::Vector<int32_t>> block_sizes) {
    fbb_.AddOffset(BATCH_TO_SPACE_ND::VT_BLOCK_SIZES, block_sizes);
  }
  explicit BATCH_TO_SPACE_NDBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<BATCH_TO_SPACE_ND> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BATCH_TO_SPACE_ND>(end);
    fbb_.Required(o, BATCH_TO_SPACE_ND::VT_INPUT);
    fbb_.Required(o, BATCH_TO_SPACE_ND::VT_OUTPUT);
    return o;
  }
};

inline flatbuffers::Offset<BATCH_TO_SPACE_ND> CreateBATCH_TO_SPACE_ND(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> input = 0,
    flatbuffers::Offset<flatbuffers::String> output = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> block_sizes = 0) {
  BATCH_TO_SPACE_NDBuilder builder_(_fbb);
  builder_.add_block_sizes(block_sizes);
  builder_.add_name(name);
  builder_.add_output(output);
  builder_.add_input(input);
  return builder_.Finish();
}

inline flatbuffers::Offset<BATCH_TO_SPACE_ND> CreateBATCH_TO_SPACE_NDDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *input = nullptr,
    const char *output = nullptr,
    const char *name = nullptr,
    const std::vector<int32_t> *block_sizes = nullptr) {
  auto input__ = input ? _fbb.CreateString(input) : 0;
  auto output__ = output ? _fbb.CreateString(output) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto block_sizes__ = block_sizes ? _fbb.CreateVector<int32_t>(*block_sizes) : 0;
  return nn::CreateBATCH_TO_SPACE_ND(
      _fbb,
      input__,
      output__,
      name__,
      block_sizes__);
}

struct SPACE_TO_BATCH_ND FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SPACE_TO_BATCH_NDBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT = 4,
    VT_OUTPUT = 6,
    VT_NAME = 8,
    VT_BLOCK_SIZES = 10,
    VT_PADS = 12
  };
  const flatbuffers::String *input() const {
    return GetPointer<const flatbuffers::String *>(VT_INPUT);
  }
  const flatbuffers::String *output() const {
    return GetPointer<const flatbuffers::String *>(VT_OUTPUT);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<int32_t> *block_sizes() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_BLOCK_SIZES);
  }
  const flatbuffers::Vector<int32_t> *pads() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_PADS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_INPUT) &&
           verifier.VerifyString(input()) &&
           VerifyOffsetRequired(verifier, VT_OUTPUT) &&
           verifier.VerifyString(output()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_BLOCK_SIZES) &&
           verifier.VerifyVector(block_sizes()) &&
           VerifyOffset(verifier, VT_PADS) &&
           verifier.VerifyVector(pads()) &&
           verifier.EndTable();
  }
};

struct SPACE_TO_BATCH_NDBuilder {
  typedef SPACE_TO_BATCH_ND Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_input(flatbuffers::Offset<flatbuffers::String> input) {
    fbb_.AddOffset(SPACE_TO_BATCH_ND::VT_INPUT, input);
  }
  void add_output(flatbuffers::Offset<flatbuffers::String> output) {
    fbb_.AddOffset(SPACE_TO_BATCH_ND::VT_OUTPUT, output);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(SPACE_TO_BATCH_ND::VT_NAME, name);
  }
  void add_block_sizes(flatbuffers::Offset<flatbuffers::Vector<int32_t>> block_sizes) {
    fbb_.AddOffset(SPACE_TO_BATCH_ND::VT_BLOCK_SIZES, block_sizes);
  }
  void add_pads(flatbuffers::Offset<flatbuffers::Vector<int32_t>> pads) {
    fbb_.AddOffset(SPACE_TO_BATCH_ND::VT_PADS, pads);
  }
  explicit SPACE_TO_BATCH_NDBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SPACE_TO_BATCH_ND> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SPACE_TO_BATCH_ND>(end);
    fbb_.Required(o, SPACE_TO_BATCH_ND::VT_INPUT);
    fbb_.Required(o, SPACE_TO_BATCH_ND::VT_OUTPUT);
    return o;
  }
};

inline flatbuffers::Offset<SPACE_TO_BATCH_ND> CreateSPACE_TO_BATCH_ND(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> input = 0,
    flatbuffers::Offset<flatbuffers::String> output = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> block_sizes = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> pads = 0) {
  SPACE_TO_BATCH_NDBuilder builder_(_fbb);
  builder_.add_pads(pads);
  builder_.add_block_sizes(block_sizes);
  builder_.add_name(name);
  builder_.add_output(output);
  builder_.add_input(input);
  return builder_.Finish();
}

inline flatbuffers::Offset<SPACE_TO_BATCH_ND> CreateSPACE_TO_BATCH_NDDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *input = nullptr,
    const char *output = nullptr,
    const char *name = nullptr,
    const std::vector<int32_t> *block_sizes = nullptr,
    const std::vector<int32_t> *pads = nullptr) {
  auto input__ = input ? _fbb.CreateString(input) : 0;
  auto output__ = output ? _fbb.CreateString(output) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto block_sizes__ = block_sizes ? _fbb.CreateVector<int32_t>(*block_sizes) : 0;
  auto pads__ = pads ? _fbb.CreateVector<int32_t>(*pads) : 0;
  return nn::CreateSPACE_TO_BATCH_ND(
      _fbb,
      input__,
      output__,
      name__,
      block_sizes__,
      pads__);
}

struct STRIDED_SLICE FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef STRIDED_SLICEBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT = 4,
    VT_OUTPUT = 6,
    VT_NAME = 8,
    VT_STARTS = 10,
    VT_ENDS = 12,
    VT_STRIDES = 14,
    VT_BEGIN_MASK = 16,
    VT_END_MASK = 18,
    VT_SHRINK_AXIS_MASK = 20
  };
  const flatbuffers::String *input() const {
    return GetPointer<const flatbuffers::String *>(VT_INPUT);
  }
  const flatbuffers::String *output() const {
    return GetPointer<const flatbuffers::String *>(VT_OUTPUT);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<int32_t> *starts() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_STARTS);
  }
  const flatbuffers::Vector<int32_t> *ends() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_ENDS);
  }
  const flatbuffers::Vector<int32_t> *strides() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_STRIDES);
  }
  int32_t begin_mask() const {
    return GetField<int32_t>(VT_BEGIN_MASK, 0);
  }
  int32_t end_mask() const {
    return GetField<int32_t>(VT_END_MASK, 0);
  }
  int32_t shrink_axis_mask() const {
    return GetField<int32_t>(VT_SHRINK_AXIS_MASK, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_INPUT) &&
           verifier.VerifyString(input()) &&
           VerifyOffsetRequired(verifier, VT_OUTPUT) &&
           verifier.VerifyString(output()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_STARTS) &&
           verifier.VerifyVector(starts()) &&
           VerifyOffset(verifier, VT_ENDS) &&
           verifier.VerifyVector(ends()) &&
           VerifyOffset(verifier, VT_STRIDES) &&
           verifier.VerifyVector(strides()) &&
           VerifyField<int32_t>(verifier, VT_BEGIN_MASK, 4) &&
           VerifyField<int32_t>(verifier, VT_END_MASK, 4) &&
           VerifyField<int32_t>(verifier, VT_SHRINK_AXIS_MASK, 4) &&
           verifier.EndTable();
  }
};

struct STRIDED_SLICEBuilder {
  typedef STRIDED_SLICE Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_input(flatbuffers::Offset<flatbuffers::String> input) {
    fbb_.AddOffset(STRIDED_SLICE::VT_INPUT, input);
  }
  void add_output(flatbuffers::Offset<flatbuffers::String> output) {
    fbb_.AddOffset(STRIDED_SLICE::VT_OUTPUT, output);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(STRIDED_SLICE::VT_NAME, name);
  }
  void add_starts(flatbuffers::Offset<flatbuffers::Vector<int32_t>> starts) {
    fbb_.AddOffset(STRIDED_SLICE::VT_STARTS, starts);
  }
  void add_ends(flatbuffers::Offset<flatbuffers::Vector<int32_t>> ends) {
    fbb_.AddOffset(STRIDED_SLICE::VT_ENDS, ends);
  }
  void add_strides(flatbuffers::Offset<flatbuffers::Vector<int32_t>> strides) {
    fbb_.AddOffset(STRIDED_SLICE::VT_STRIDES, strides);
  }
  void add_begin_mask(int32_t begin_mask) {
    fbb_.AddElement<int32_t>(STRIDED_SLICE::VT_BEGIN_MASK, begin_mask, 0);
  }
  void add_end_mask(int32_t end_mask) {
    fbb_.AddElement<int32_t>(STRIDED_SLICE::VT_END_MASK, end_mask, 0);
  }
  void add_shrink_axis_mask(int32_t shrink_axis_mask) {
    fbb_.AddElement<int32_t>(STRIDED_SLICE::VT_SHRINK_AXIS_MASK, shrink_axis_mask, 0);
  }
  explicit STRIDED_SLICEBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<STRIDED_SLICE> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<STRIDED_SLICE>(end);
    fbb_.Required(o, STRIDED_SLICE::VT_INPUT);
    fbb_.Required(o, STRIDED_SLICE::VT_OUTPUT);
    return o;
  }
};

inline flatbuffers::Offset<STRIDED_SLICE> CreateSTRIDED_SLICE(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> input = 0,
    flatbuffers::Offset<flatbuffers::String> output = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> starts = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> ends = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> strides = 0,
    int32_t begin_mask = 0,
    int32_t end_mask = 0,
    int32_t shrink_axis_mask = 0) {
  STRIDED_SLICEBuilder builder_(_fbb);
  builder_.add_shrink_axis_mask(shrink_axis_mask);
  builder_.add_end_mask(end_mask);
  builder_.add_begin_mask(begin_mask);
  builder_.add_strides(strides);
  builder_.add_ends(ends);
  builder_.add_starts(starts);
  builder_.add_name(name);
  builder_.add_output(output);
  builder_.add_input(input);
  return builder_.Finish();
}

inline flatbuffers::Offset<STRIDED_SLICE> CreateSTRIDED_SLICEDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *input = nullptr,
    const char *output = nullptr,
    const char *name = nullptr,
    const std::vector<int32_t> *starts = nullptr,
    const std::vector<int32_t> *ends = nullptr,
    const std::vector<int32_t> *strides = nullptr,
    int32_t begin_mask = 0,
    int32_t end_mask = 0,
    int32_t shrink_axis_mask = 0) {
  auto input__ = input ? _fbb.CreateString(input) : 0;
  auto output__ = output ? _fbb.CreateString(output) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto starts__ = starts ? _fbb.CreateVector<int32_t>(*starts) : 0;
  auto ends__ = ends ? _fbb.CreateVector<int32_t>(*ends) : 0;
  auto strides__ = strides ? _fbb.CreateVector<int32_t>(*strides) : 0;
  return nn::CreateSTRIDED_SLICE(
      _fbb,
      input__,
      output__,
      name__,
      starts__,
      ends__,
      strides__,
      begin_mask,
      end_mask,
      shrink_axis_mask);
}

struct MUL FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MULBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT = 4,
    VT_OUTPUT = 6,
    VT_NAME = 8,
    VT_FUSE_CODE = 10
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *input() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_INPUT);
  }
  const flatbuffers::String *output() const {
    return GetPointer<const flatbuffers::String *>(VT_OUTPUT);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  nn::FuseCode fuse_code() const {
    return static_cast<nn::FuseCode>(GetField<int8_t>(VT_FUSE_CODE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_INPUT) &&
           verifier.VerifyVector(input()) &&
           verifier.VerifyVectorOfStrings(input()) &&
           VerifyOffsetRequired(verifier, VT_OUTPUT) &&
           verifier.VerifyString(output()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int8_t>(verifier, VT_FUSE_CODE, 1) &&
           verifier.EndTable();
  }
};

struct MULBuilder {
  typedef MUL Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_input(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> input) {
    fbb_.AddOffset(MUL::VT_INPUT, input);
  }
  void add_output(flatbuffers::Offset<flatbuffers::String> output) {
    fbb_.AddOffset(MUL::VT_OUTPUT, output);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(MUL::VT_NAME, name);
  }
  void add_fuse_code(nn::FuseCode fuse_code) {
    fbb_.AddElement<int8_t>(MUL::VT_FUSE_CODE, static_cast<int8_t>(fuse_code), 0);
  }
  explicit MULBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<MUL> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MUL>(end);
    fbb_.Required(o, MUL::VT_INPUT);
    fbb_.Required(o, MUL::VT_OUTPUT);
    return o;
  }
};

inline flatbuffers::Offset<MUL> CreateMUL(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> input = 0,
    flatbuffers::Offset<flatbuffers::String> output = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    nn::FuseCode fuse_code = nn::FuseCode_None) {
  MULBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_output(output);
  builder_.add_input(input);
  builder_.add_fuse_code(fuse_code);
  return builder_.Finish();
}

inline flatbuffers::Offset<MUL> CreateMULDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *input = nullptr,
    const char *output = nullptr,
    const char *name = nullptr,
    nn::FuseCode fuse_code = nn::FuseCode_None) {
  auto input__ = input ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*input) : 0;
  auto output__ = output ? _fbb.CreateString(output) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return nn::CreateMUL(
      _fbb,
      input__,
      output__,
      name__,
      fuse_code);
}

struct DEQUANTIZE FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DEQUANTIZEBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT = 4,
    VT_OUTPUT = 6,
    VT_NAME = 8
  };
  const flatbuffers::String *input() const {
    return GetPointer<const flatbuffers::String *>(VT_INPUT);
  }
  const flatbuffers::String *output() const {
    return GetPointer<const flatbuffers::String *>(VT_OUTPUT);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_INPUT) &&
           verifier.VerifyString(input()) &&
           VerifyOffsetRequired(verifier, VT_OUTPUT) &&
           verifier.VerifyString(output()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct DEQUANTIZEBuilder {
  typedef DEQUANTIZE Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_input(flatbuffers::Offset<flatbuffers::String> input) {
    fbb_.AddOffset(DEQUANTIZE::VT_INPUT, input);
  }
  void add_output(flatbuffers::Offset<flatbuffers::String> output) {
    fbb_.AddOffset(DEQUANTIZE::VT_OUTPUT, output);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(DEQUANTIZE::VT_NAME, name);
  }
  explicit DEQUANTIZEBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DEQUANTIZE> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DEQUANTIZE>(end);
    fbb_.Required(o, DEQUANTIZE::VT_INPUT);
    fbb_.Required(o, DEQUANTIZE::VT_OUTPUT);
    return o;
  }
};

inline flatbuffers::Offset<DEQUANTIZE> CreateDEQUANTIZE(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> input = 0,
    flatbuffers::Offset<flatbuffers::String> output = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  DEQUANTIZEBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_output(output);
  builder_.add_input(input);
  return builder_.Finish();
}

inline flatbuffers::Offset<DEQUANTIZE> CreateDEQUANTIZEDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *input = nullptr,
    const char *output = nullptr,
    const char *name = nullptr) {
  auto input__ = input ? _fbb.CreateString(input) : 0;
  auto output__ = output ? _fbb.CreateString(output) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return nn::CreateDEQUANTIZE(
      _fbb,
      input__,
      output__,
      name__);
}

struct LOCAL_RESPONSE_NORMALIZATION FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LOCAL_RESPONSE_NORMALIZATIONBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT = 4,
    VT_OUTPUT = 6,
    VT_NAME = 8,
    VT_RADIUS = 10,
    VT_BIAS = 12,
    VT_ALPHA = 14,
    VT_BETA = 16
  };
  const flatbuffers::String *input() const {
    return GetPointer<const flatbuffers::String *>(VT_INPUT);
  }
  const flatbuffers::String *output() const {
    return GetPointer<const flatbuffers::String *>(VT_OUTPUT);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int32_t radius() const {
    return GetField<int32_t>(VT_RADIUS, 0);
  }
  float bias() const {
    return GetField<float>(VT_BIAS, 0.0f);
  }
  float alpha() const {
    return GetField<float>(VT_ALPHA, 0.0f);
  }
  float beta() const {
    return GetField<float>(VT_BETA, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_INPUT) &&
           verifier.VerifyString(input()) &&
           VerifyOffsetRequired(verifier, VT_OUTPUT) &&
           verifier.VerifyString(output()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int32_t>(verifier, VT_RADIUS, 4) &&
           VerifyField<float>(verifier, VT_BIAS, 4) &&
           VerifyField<float>(verifier, VT_ALPHA, 4) &&
           VerifyField<float>(verifier, VT_BETA, 4) &&
           verifier.EndTable();
  }
};

struct LOCAL_RESPONSE_NORMALIZATIONBuilder {
  typedef LOCAL_RESPONSE_NORMALIZATION Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_input(flatbuffers::Offset<flatbuffers::String> input) {
    fbb_.AddOffset(LOCAL_RESPONSE_NORMALIZATION::VT_INPUT, input);
  }
  void add_output(flatbuffers::Offset<flatbuffers::String> output) {
    fbb_.AddOffset(LOCAL_RESPONSE_NORMALIZATION::VT_OUTPUT, output);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(LOCAL_RESPONSE_NORMALIZATION::VT_NAME, name);
  }
  void add_radius(int32_t radius) {
    fbb_.AddElement<int32_t>(LOCAL_RESPONSE_NORMALIZATION::VT_RADIUS, radius, 0);
  }
  void add_bias(float bias) {
    fbb_.AddElement<float>(LOCAL_RESPONSE_NORMALIZATION::VT_BIAS, bias, 0.0f);
  }
  void add_alpha(float alpha) {
    fbb_.AddElement<float>(LOCAL_RESPONSE_NORMALIZATION::VT_ALPHA, alpha, 0.0f);
  }
  void add_beta(float beta) {
    fbb_.AddElement<float>(LOCAL_RESPONSE_NORMALIZATION::VT_BETA, beta, 0.0f);
  }
  explicit LOCAL_RESPONSE_NORMALIZATIONBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<LOCAL_RESPONSE_NORMALIZATION> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LOCAL_RESPONSE_NORMALIZATION>(end);
    fbb_.Required(o, LOCAL_RESPONSE_NORMALIZATION::VT_INPUT);
    fbb_.Required(o, LOCAL_RESPONSE_NORMALIZATION::VT_OUTPUT);
    return o;
  }
};

inline flatbuffers::Offset<LOCAL_RESPONSE_NORMALIZATION> CreateLOCAL_RESPONSE_NORMALIZATION(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> input = 0,
    flatbuffers::Offset<flatbuffers::String> output = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int32_t radius = 0,
    float bias = 0.0f,
    float alpha = 0.0f,
    float beta = 0.0f) {
  LOCAL_RESPONSE_NORMALIZATIONBuilder builder_(_fbb);
  builder_.add_beta(beta);
  builder_.add_alpha(alpha);
  builder_.add_bias(bias);
  builder_.add_radius(radius);
  builder_.add_name(name);
  builder_.add_output(output);
  builder_.add_input(input);
  return builder_.Finish();
}

inline flatbuffers::Offset<LOCAL_RESPONSE_NORMALIZATION> CreateLOCAL_RESPONSE_NORMALIZATIONDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *input = nullptr,
    const char *output = nullptr,
    const char *name = nullptr,
    int32_t radius = 0,
    float bias = 0.0f,
    float alpha = 0.0f,
    float beta = 0.0f) {
  auto input__ = input ? _fbb.CreateString(input) : 0;
  auto output__ = output ? _fbb.CreateString(output) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return nn::CreateLOCAL_RESPONSE_NORMALIZATION(
      _fbb,
      input__,
      output__,
      name__,
      radius,
      bias,
      alpha,
      beta);
}

struct TANH FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TANHBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT = 4,
    VT_OUTPUT = 6,
    VT_NAME = 8
  };
  const flatbuffers::String *input() const {
    return GetPointer<const flatbuffers::String *>(VT_INPUT);
  }
  const flatbuffers::String *output() const {
    return GetPointer<const flatbuffers::String *>(VT_OUTPUT);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_INPUT) &&
           verifier.VerifyString(input()) &&
           VerifyOffsetRequired(verifier, VT_OUTPUT) &&
           verifier.VerifyString(output()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct TANHBuilder {
  typedef TANH Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_input(flatbuffers::Offset<flatbuffers::String> input) {
    fbb_.AddOffset(TANH::VT_INPUT, input);
  }
  void add_output(flatbuffers::Offset<flatbuffers::String> output) {
    fbb_.AddOffset(TANH::VT_OUTPUT, output);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(TANH::VT_NAME, name);
  }
  explicit TANHBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TANH> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TANH>(end);
    fbb_.Required(o, TANH::VT_INPUT);
    fbb_.Required(o, TANH::VT_OUTPUT);
    return o;
  }
};

inline flatbuffers::Offset<TANH> CreateTANH(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> input = 0,
    flatbuffers::Offset<flatbuffers::String> output = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  TANHBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_output(output);
  builder_.add_input(input);
  return builder_.Finish();
}

inline flatbuffers::Offset<TANH> CreateTANHDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *input = nullptr,
    const char *output = nullptr,
    const char *name = nullptr) {
  auto input__ = input ? _fbb.CreateString(input) : 0;
  auto output__ = output ? _fbb.CreateString(output) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return nn::CreateTANH(
      _fbb,
      input__,
      output__,
      name__);
}

struct FLOOR FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FLOORBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT = 4,
    VT_OUTPUT = 6,
    VT_NAME = 8
  };
  const flatbuffers::String *input() const {
    return GetPointer<const flatbuffers::String *>(VT_INPUT);
  }
  const flatbuffers::String *output() const {
    return GetPointer<const flatbuffers::String *>(VT_OUTPUT);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_INPUT) &&
           verifier.VerifyString(input()) &&
           VerifyOffsetRequired(verifier, VT_OUTPUT) &&
           verifier.VerifyString(output()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct FLOORBuilder {
  typedef FLOOR Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_input(flatbuffers::Offset<flatbuffers::String> input) {
    fbb_.AddOffset(FLOOR::VT_INPUT, input);
  }
  void add_output(flatbuffers::Offset<flatbuffers::String> output) {
    fbb_.AddOffset(FLOOR::VT_OUTPUT, output);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(FLOOR::VT_NAME, name);
  }
  explicit FLOORBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FLOOR> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FLOOR>(end);
    fbb_.Required(o, FLOOR::VT_INPUT);
    fbb_.Required(o, FLOOR::VT_OUTPUT);
    return o;
  }
};

inline flatbuffers::Offset<FLOOR> CreateFLOOR(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> input = 0,
    flatbuffers::Offset<flatbuffers::String> output = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  FLOORBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_output(output);
  builder_.add_input(input);
  return builder_.Finish();
}

inline flatbuffers::Offset<FLOOR> CreateFLOORDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *input = nullptr,
    const char *output = nullptr,
    const char *name = nullptr) {
  auto input__ = input ? _fbb.CreateString(input) : 0;
  auto output__ = output ? _fbb.CreateString(output) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return nn::CreateFLOOR(
      _fbb,
      input__,
      output__,
      name__);
}

struct LOGISTIC FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LOGISTICBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT = 4,
    VT_OUTPUT = 6,
    VT_NAME = 8
  };
  const flatbuffers::String *input() const {
    return GetPointer<const flatbuffers::String *>(VT_INPUT);
  }
  const flatbuffers::String *output() const {
    return GetPointer<const flatbuffers::String *>(VT_OUTPUT);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_INPUT) &&
           verifier.VerifyString(input()) &&
           VerifyOffsetRequired(verifier, VT_OUTPUT) &&
           verifier.VerifyString(output()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct LOGISTICBuilder {
  typedef LOGISTIC Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_input(flatbuffers::Offset<flatbuffers::String> input) {
    fbb_.AddOffset(LOGISTIC::VT_INPUT, input);
  }
  void add_output(flatbuffers::Offset<flatbuffers::String> output) {
    fbb_.AddOffset(LOGISTIC::VT_OUTPUT, output);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(LOGISTIC::VT_NAME, name);
  }
  explicit LOGISTICBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<LOGISTIC> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LOGISTIC>(end);
    fbb_.Required(o, LOGISTIC::VT_INPUT);
    fbb_.Required(o, LOGISTIC::VT_OUTPUT);
    return o;
  }
};

inline flatbuffers::Offset<LOGISTIC> CreateLOGISTIC(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> input = 0,
    flatbuffers::Offset<flatbuffers::String> output = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  LOGISTICBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_output(output);
  builder_.add_input(input);
  return builder_.Finish();
}

inline flatbuffers::Offset<LOGISTIC> CreateLOGISTICDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *input = nullptr,
    const char *output = nullptr,
    const char *name = nullptr) {
  auto input__ = input ? _fbb.CreateString(input) : 0;
  auto output__ = output ? _fbb.CreateString(output) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return nn::CreateLOGISTIC(
      _fbb,
      input__,
      output__,
      name__);
}

struct PRELU FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PRELUBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT = 4,
    VT_OUTPUT = 6,
    VT_NAME = 8,
    VT_ALPHA = 10
  };
  const flatbuffers::String *input() const {
    return GetPointer<const flatbuffers::String *>(VT_INPUT);
  }
  const flatbuffers::String *output() const {
    return GetPointer<const flatbuffers::String *>(VT_OUTPUT);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *alpha() const {
    return GetPointer<const flatbuffers::String *>(VT_ALPHA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_INPUT) &&
           verifier.VerifyString(input()) &&
           VerifyOffsetRequired(verifier, VT_OUTPUT) &&
           verifier.VerifyString(output()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_ALPHA) &&
           verifier.VerifyString(alpha()) &&
           verifier.EndTable();
  }
};

struct PRELUBuilder {
  typedef PRELU Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_input(flatbuffers::Offset<flatbuffers::String> input) {
    fbb_.AddOffset(PRELU::VT_INPUT, input);
  }
  void add_output(flatbuffers::Offset<flatbuffers::String> output) {
    fbb_.AddOffset(PRELU::VT_OUTPUT, output);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(PRELU::VT_NAME, name);
  }
  void add_alpha(flatbuffers::Offset<flatbuffers::String> alpha) {
    fbb_.AddOffset(PRELU::VT_ALPHA, alpha);
  }
  explicit PRELUBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PRELU> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PRELU>(end);
    fbb_.Required(o, PRELU::VT_INPUT);
    fbb_.Required(o, PRELU::VT_OUTPUT);
    return o;
  }
};

inline flatbuffers::Offset<PRELU> CreatePRELU(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> input = 0,
    flatbuffers::Offset<flatbuffers::String> output = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> alpha = 0) {
  PRELUBuilder builder_(_fbb);
  builder_.add_alpha(alpha);
  builder_.add_name(name);
  builder_.add_output(output);
  builder_.add_input(input);
  return builder_.Finish();
}

inline flatbuffers::Offset<PRELU> CreatePRELUDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *input = nullptr,
    const char *output = nullptr,
    const char *name = nullptr,
    const char *alpha = nullptr) {
  auto input__ = input ? _fbb.CreateString(input) : 0;
  auto output__ = output ? _fbb.CreateString(output) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto alpha__ = alpha ? _fbb.CreateString(alpha) : 0;
  return nn::CreatePRELU(
      _fbb,
      input__,
      output__,
      name__,
      alpha__);
}

struct POW FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef POWBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT = 4,
    VT_OUTPUT = 6,
    VT_NAME = 8,
    VT_EXP = 10
  };
  const flatbuffers::String *input() const {
    return GetPointer<const flatbuffers::String *>(VT_INPUT);
  }
  const flatbuffers::String *output() const {
    return GetPointer<const flatbuffers::String *>(VT_OUTPUT);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *exp() const {
    return GetPointer<const flatbuffers::String *>(VT_EXP);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_INPUT) &&
           verifier.VerifyString(input()) &&
           VerifyOffsetRequired(verifier, VT_OUTPUT) &&
           verifier.VerifyString(output()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_EXP) &&
           verifier.VerifyString(exp()) &&
           verifier.EndTable();
  }
};

struct POWBuilder {
  typedef POW Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_input(flatbuffers::Offset<flatbuffers::String> input) {
    fbb_.AddOffset(POW::VT_INPUT, input);
  }
  void add_output(flatbuffers::Offset<flatbuffers::String> output) {
    fbb_.AddOffset(POW::VT_OUTPUT, output);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(POW::VT_NAME, name);
  }
  void add_exp(flatbuffers::Offset<flatbuffers::String> exp) {
    fbb_.AddOffset(POW::VT_EXP, exp);
  }
  explicit POWBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<POW> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<POW>(end);
    fbb_.Required(o, POW::VT_INPUT);
    fbb_.Required(o, POW::VT_OUTPUT);
    return o;
  }
};

inline flatbuffers::Offset<POW> CreatePOW(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> input = 0,
    flatbuffers::Offset<flatbuffers::String> output = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> exp = 0) {
  POWBuilder builder_(_fbb);
  builder_.add_exp(exp);
  builder_.add_name(name);
  builder_.add_output(output);
  builder_.add_input(input);
  return builder_.Finish();
}

inline flatbuffers::Offset<POW> CreatePOWDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *input = nullptr,
    const char *output = nullptr,
    const char *name = nullptr,
    const char *exp = nullptr) {
  auto input__ = input ? _fbb.CreateString(input) : 0;
  auto output__ = output ? _fbb.CreateString(output) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto exp__ = exp ? _fbb.CreateString(exp) : 0;
  return nn::CreatePOW(
      _fbb,
      input__,
      output__,
      name__,
      exp__);
}

struct NEG FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NEGBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT = 4,
    VT_OUTPUT = 6,
    VT_NAME = 8
  };
  const flatbuffers::String *input() const {
    return GetPointer<const flatbuffers::String *>(VT_INPUT);
  }
  const flatbuffers::String *output() const {
    return GetPointer<const flatbuffers::String *>(VT_OUTPUT);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_INPUT) &&
           verifier.VerifyString(input()) &&
           VerifyOffsetRequired(verifier, VT_OUTPUT) &&
           verifier.VerifyString(output()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct NEGBuilder {
  typedef NEG Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_input(flatbuffers::Offset<flatbuffers::String> input) {
    fbb_.AddOffset(NEG::VT_INPUT, input);
  }
  void add_output(flatbuffers::Offset<flatbuffers::String> output) {
    fbb_.AddOffset(NEG::VT_OUTPUT, output);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(NEG::VT_NAME, name);
  }
  explicit NEGBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<NEG> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NEG>(end);
    fbb_.Required(o, NEG::VT_INPUT);
    fbb_.Required(o, NEG::VT_OUTPUT);
    return o;
  }
};

inline flatbuffers::Offset<NEG> CreateNEG(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> input = 0,
    flatbuffers::Offset<flatbuffers::String> output = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  NEGBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_output(output);
  builder_.add_input(input);
  return builder_.Finish();
}

inline flatbuffers::Offset<NEG> CreateNEGDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *input = nullptr,
    const char *output = nullptr,
    const char *name = nullptr) {
  auto input__ = input ? _fbb.CreateString(input) : 0;
  auto output__ = output ? _fbb.CreateString(output) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return nn::CreateNEG(
      _fbb,
      input__,
      output__,
      name__);
}

struct MINIMUM FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MINIMUMBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT = 4,
    VT_OUTPUT = 6,
    VT_NAME = 8
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *input() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_INPUT);
  }
  const flatbuffers::String *output() const {
    return GetPointer<const flatbuffers::String *>(VT_OUTPUT);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_INPUT) &&
           verifier.VerifyVector(input()) &&
           verifier.VerifyVectorOfStrings(input()) &&
           VerifyOffsetRequired(verifier, VT_OUTPUT) &&
           verifier.VerifyString(output()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct MINIMUMBuilder {
  typedef MINIMUM Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_input(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> input) {
    fbb_.AddOffset(MINIMUM::VT_INPUT, input);
  }
  void add_output(flatbuffers::Offset<flatbuffers::String> output) {
    fbb_.AddOffset(MINIMUM::VT_OUTPUT, output);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(MINIMUM::VT_NAME, name);
  }
  explicit MINIMUMBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<MINIMUM> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MINIMUM>(end);
    fbb_.Required(o, MINIMUM::VT_INPUT);
    fbb_.Required(o, MINIMUM::VT_OUTPUT);
    return o;
  }
};

inline flatbuffers::Offset<MINIMUM> CreateMINIMUM(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> input = 0,
    flatbuffers::Offset<flatbuffers::String> output = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  MINIMUMBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_output(output);
  builder_.add_input(input);
  return builder_.Finish();
}

inline flatbuffers::Offset<MINIMUM> CreateMINIMUMDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *input = nullptr,
    const char *output = nullptr,
    const char *name = nullptr) {
  auto input__ = input ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*input) : 0;
  auto output__ = output ? _fbb.CreateString(output) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return nn::CreateMINIMUM(
      _fbb,
      input__,
      output__,
      name__);
}

struct MAXIMUM FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MAXIMUMBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT = 4,
    VT_OUTPUT = 6,
    VT_NAME = 8
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *input() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_INPUT);
  }
  const flatbuffers::String *output() const {
    return GetPointer<const flatbuffers::String *>(VT_OUTPUT);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_INPUT) &&
           verifier.VerifyVector(input()) &&
           verifier.VerifyVectorOfStrings(input()) &&
           VerifyOffsetRequired(verifier, VT_OUTPUT) &&
           verifier.VerifyString(output()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct MAXIMUMBuilder {
  typedef MAXIMUM Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_input(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> input) {
    fbb_.AddOffset(MAXIMUM::VT_INPUT, input);
  }
  void add_output(flatbuffers::Offset<flatbuffers::String> output) {
    fbb_.AddOffset(MAXIMUM::VT_OUTPUT, output);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(MAXIMUM::VT_NAME, name);
  }
  explicit MAXIMUMBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<MAXIMUM> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MAXIMUM>(end);
    fbb_.Required(o, MAXIMUM::VT_INPUT);
    fbb_.Required(o, MAXIMUM::VT_OUTPUT);
    return o;
  }
};

inline flatbuffers::Offset<MAXIMUM> CreateMAXIMUM(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> input = 0,
    flatbuffers::Offset<flatbuffers::String> output = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  MAXIMUMBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_output(output);
  builder_.add_input(input);
  return builder_.Finish();
}

inline flatbuffers::Offset<MAXIMUM> CreateMAXIMUMDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *input = nullptr,
    const char *output = nullptr,
    const char *name = nullptr) {
  auto input__ = input ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*input) : 0;
  auto output__ = output ? _fbb.CreateString(output) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return nn::CreateMAXIMUM(
      _fbb,
      input__,
      output__,
      name__);
}

struct LOG FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LOGBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT = 4,
    VT_OUTPUT = 6,
    VT_NAME = 8
  };
  const flatbuffers::String *input() const {
    return GetPointer<const flatbuffers::String *>(VT_INPUT);
  }
  const flatbuffers::String *output() const {
    return GetPointer<const flatbuffers::String *>(VT_OUTPUT);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_INPUT) &&
           verifier.VerifyString(input()) &&
           VerifyOffsetRequired(verifier, VT_OUTPUT) &&
           verifier.VerifyString(output()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct LOGBuilder {
  typedef LOG Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_input(flatbuffers::Offset<flatbuffers::String> input) {
    fbb_.AddOffset(LOG::VT_INPUT, input);
  }
  void add_output(flatbuffers::Offset<flatbuffers::String> output) {
    fbb_.AddOffset(LOG::VT_OUTPUT, output);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(LOG::VT_NAME, name);
  }
  explicit LOGBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<LOG> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LOG>(end);
    fbb_.Required(o, LOG::VT_INPUT);
    fbb_.Required(o, LOG::VT_OUTPUT);
    return o;
  }
};

inline flatbuffers::Offset<LOG> CreateLOG(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> input = 0,
    flatbuffers::Offset<flatbuffers::String> output = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  LOGBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_output(output);
  builder_.add_input(input);
  return builder_.Finish();
}

inline flatbuffers::Offset<LOG> CreateLOGDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *input = nullptr,
    const char *output = nullptr,
    const char *name = nullptr) {
  auto input__ = input ? _fbb.CreateString(input) : 0;
  auto output__ = output ? _fbb.CreateString(output) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return nn::CreateLOG(
      _fbb,
      input__,
      output__,
      name__);
}

struct ABS FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ABSBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT = 4,
    VT_OUTPUT = 6,
    VT_NAME = 8
  };
  const flatbuffers::String *input() const {
    return GetPointer<const flatbuffers::String *>(VT_INPUT);
  }
  const flatbuffers::String *output() const {
    return GetPointer<const flatbuffers::String *>(VT_OUTPUT);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_INPUT) &&
           verifier.VerifyString(input()) &&
           VerifyOffsetRequired(verifier, VT_OUTPUT) &&
           verifier.VerifyString(output()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct ABSBuilder {
  typedef ABS Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_input(flatbuffers::Offset<flatbuffers::String> input) {
    fbb_.AddOffset(ABS::VT_INPUT, input);
  }
  void add_output(flatbuffers::Offset<flatbuffers::String> output) {
    fbb_.AddOffset(ABS::VT_OUTPUT, output);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(ABS::VT_NAME, name);
  }
  explicit ABSBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ABS> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ABS>(end);
    fbb_.Required(o, ABS::VT_INPUT);
    fbb_.Required(o, ABS::VT_OUTPUT);
    return o;
  }
};

inline flatbuffers::Offset<ABS> CreateABS(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> input = 0,
    flatbuffers::Offset<flatbuffers::String> output = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  ABSBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_output(output);
  builder_.add_input(input);
  return builder_.Finish();
}

inline flatbuffers::Offset<ABS> CreateABSDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *input = nullptr,
    const char *output = nullptr,
    const char *name = nullptr) {
  auto input__ = input ? _fbb.CreateString(input) : 0;
  auto output__ = output ? _fbb.CreateString(output) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return nn::CreateABS(
      _fbb,
      input__,
      output__,
      name__);
}

struct EXP FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EXPBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT = 4,
    VT_OUTPUT = 6,
    VT_NAME = 8
  };
  const flatbuffers::String *input() const {
    return GetPointer<const flatbuffers::String *>(VT_INPUT);
  }
  const flatbuffers::String *output() const {
    return GetPointer<const flatbuffers::String *>(VT_OUTPUT);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_INPUT) &&
           verifier.VerifyString(input()) &&
           VerifyOffsetRequired(verifier, VT_OUTPUT) &&
           verifier.VerifyString(output()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct EXPBuilder {
  typedef EXP Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_input(flatbuffers::Offset<flatbuffers::String> input) {
    fbb_.AddOffset(EXP::VT_INPUT, input);
  }
  void add_output(flatbuffers::Offset<flatbuffers::String> output) {
    fbb_.AddOffset(EXP::VT_OUTPUT, output);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(EXP::VT_NAME, name);
  }
  explicit EXPBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<EXP> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EXP>(end);
    fbb_.Required(o, EXP::VT_INPUT);
    fbb_.Required(o, EXP::VT_OUTPUT);
    return o;
  }
};

inline flatbuffers::Offset<EXP> CreateEXP(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> input = 0,
    flatbuffers::Offset<flatbuffers::String> output = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  EXPBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_output(output);
  builder_.add_input(input);
  return builder_.Finish();
}

inline flatbuffers::Offset<EXP> CreateEXPDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *input = nullptr,
    const char *output = nullptr,
    const char *name = nullptr) {
  auto input__ = input ? _fbb.CreateString(input) : 0;
  auto output__ = output ? _fbb.CreateString(output) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return nn::CreateEXP(
      _fbb,
      input__,
      output__,
      name__);
}

struct SUB FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SUBBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT = 4,
    VT_OUTPUT = 6,
    VT_NAME = 8,
    VT_FUSE_CODE = 10
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *input() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_INPUT);
  }
  const flatbuffers::String *output() const {
    return GetPointer<const flatbuffers::String *>(VT_OUTPUT);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  nn::FuseCode fuse_code() const {
    return static_cast<nn::FuseCode>(GetField<int8_t>(VT_FUSE_CODE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_INPUT) &&
           verifier.VerifyVector(input()) &&
           verifier.VerifyVectorOfStrings(input()) &&
           VerifyOffsetRequired(verifier, VT_OUTPUT) &&
           verifier.VerifyString(output()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int8_t>(verifier, VT_FUSE_CODE, 1) &&
           verifier.EndTable();
  }
};

struct SUBBuilder {
  typedef SUB Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_input(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> input) {
    fbb_.AddOffset(SUB::VT_INPUT, input);
  }
  void add_output(flatbuffers::Offset<flatbuffers::String> output) {
    fbb_.AddOffset(SUB::VT_OUTPUT, output);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(SUB::VT_NAME, name);
  }
  void add_fuse_code(nn::FuseCode fuse_code) {
    fbb_.AddElement<int8_t>(SUB::VT_FUSE_CODE, static_cast<int8_t>(fuse_code), 0);
  }
  explicit SUBBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SUB> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SUB>(end);
    fbb_.Required(o, SUB::VT_INPUT);
    fbb_.Required(o, SUB::VT_OUTPUT);
    return o;
  }
};

inline flatbuffers::Offset<SUB> CreateSUB(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> input = 0,
    flatbuffers::Offset<flatbuffers::String> output = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    nn::FuseCode fuse_code = nn::FuseCode_None) {
  SUBBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_output(output);
  builder_.add_input(input);
  builder_.add_fuse_code(fuse_code);
  return builder_.Finish();
}

inline flatbuffers::Offset<SUB> CreateSUBDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *input = nullptr,
    const char *output = nullptr,
    const char *name = nullptr,
    nn::FuseCode fuse_code = nn::FuseCode_None) {
  auto input__ = input ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*input) : 0;
  auto output__ = output ? _fbb.CreateString(output) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return nn::CreateSUB(
      _fbb,
      input__,
      output__,
      name__,
      fuse_code);
}

struct Graph FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GraphBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERSION = 4,
    VT_NODE_TYPE = 6,
    VT_NODE = 8,
    VT_INITIALIZERS = 10,
    VT_INPUTS = 12,
    VT_QUANT_INFOS = 14,
    VT_OUTPUTS = 16
  };
  const nn::versionInfo *version() const {
    return GetStruct<const nn::versionInfo *>(VT_VERSION);
  }
  const flatbuffers::Vector<uint8_t> *node_type() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_NODE_TYPE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<void>> *node() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<void>> *>(VT_NODE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<nn::Tensor>> *initializers() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<nn::Tensor>> *>(VT_INITIALIZERS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<nn::Input>> *inputs() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<nn::Input>> *>(VT_INPUTS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<nn::QuantInfo>> *quant_infos() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<nn::QuantInfo>> *>(VT_QUANT_INFOS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *outputs() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_OUTPUTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<nn::versionInfo>(verifier, VT_VERSION, 8) &&
           VerifyOffset(verifier, VT_NODE_TYPE) &&
           verifier.VerifyVector(node_type()) &&
           VerifyOffset(verifier, VT_NODE) &&
           verifier.VerifyVector(node()) &&
           VerifyLayerVector(verifier, node(), node_type()) &&
           VerifyOffset(verifier, VT_INITIALIZERS) &&
           verifier.VerifyVector(initializers()) &&
           verifier.VerifyVectorOfTables(initializers()) &&
           VerifyOffset(verifier, VT_INPUTS) &&
           verifier.VerifyVector(inputs()) &&
           verifier.VerifyVectorOfTables(inputs()) &&
           VerifyOffset(verifier, VT_QUANT_INFOS) &&
           verifier.VerifyVector(quant_infos()) &&
           verifier.VerifyVectorOfTables(quant_infos()) &&
           VerifyOffset(verifier, VT_OUTPUTS) &&
           verifier.VerifyVector(outputs()) &&
           verifier.VerifyVectorOfStrings(outputs()) &&
           verifier.EndTable();
  }
};

struct GraphBuilder {
  typedef Graph Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_version(const nn::versionInfo *version) {
    fbb_.AddStruct(Graph::VT_VERSION, version);
  }
  void add_node_type(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> node_type) {
    fbb_.AddOffset(Graph::VT_NODE_TYPE, node_type);
  }
  void add_node(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<void>>> node) {
    fbb_.AddOffset(Graph::VT_NODE, node);
  }
  void add_initializers(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<nn::Tensor>>> initializers) {
    fbb_.AddOffset(Graph::VT_INITIALIZERS, initializers);
  }
  void add_inputs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<nn::Input>>> inputs) {
    fbb_.AddOffset(Graph::VT_INPUTS, inputs);
  }
  void add_quant_infos(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<nn::QuantInfo>>> quant_infos) {
    fbb_.AddOffset(Graph::VT_QUANT_INFOS, quant_infos);
  }
  void add_outputs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> outputs) {
    fbb_.AddOffset(Graph::VT_OUTPUTS, outputs);
  }
  explicit GraphBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Graph> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Graph>(end);
    return o;
  }
};

inline flatbuffers::Offset<Graph> CreateGraph(
    flatbuffers::FlatBufferBuilder &_fbb,
    const nn::versionInfo *version = nullptr,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> node_type = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<void>>> node = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<nn::Tensor>>> initializers = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<nn::Input>>> inputs = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<nn::QuantInfo>>> quant_infos = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> outputs = 0) {
  GraphBuilder builder_(_fbb);
  builder_.add_outputs(outputs);
  builder_.add_quant_infos(quant_infos);
  builder_.add_inputs(inputs);
  builder_.add_initializers(initializers);
  builder_.add_node(node);
  builder_.add_node_type(node_type);
  builder_.add_version(version);
  return builder_.Finish();
}

inline flatbuffers::Offset<Graph> CreateGraphDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const nn::versionInfo *version = nullptr,
    const std::vector<uint8_t> *node_type = nullptr,
    const std::vector<flatbuffers::Offset<void>> *node = nullptr,
    const std::vector<flatbuffers::Offset<nn::Tensor>> *initializers = nullptr,
    const std::vector<flatbuffers::Offset<nn::Input>> *inputs = nullptr,
    const std::vector<flatbuffers::Offset<nn::QuantInfo>> *quant_infos = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *outputs = nullptr) {
  auto node_type__ = node_type ? _fbb.CreateVector<uint8_t>(*node_type) : 0;
  auto node__ = node ? _fbb.CreateVector<flatbuffers::Offset<void>>(*node) : 0;
  auto initializers__ = initializers ? _fbb.CreateVector<flatbuffers::Offset<nn::Tensor>>(*initializers) : 0;
  auto inputs__ = inputs ? _fbb.CreateVector<flatbuffers::Offset<nn::Input>>(*inputs) : 0;
  auto quant_infos__ = quant_infos ? _fbb.CreateVector<flatbuffers::Offset<nn::QuantInfo>>(*quant_infos) : 0;
  auto outputs__ = outputs ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*outputs) : 0;
  return nn::CreateGraph(
      _fbb,
      version,
      node_type__,
      node__,
      initializers__,
      inputs__,
      quant_infos__,
      outputs__);
}

inline bool VerifyLayer(flatbuffers::Verifier &verifier, const void *obj, Layer type) {
  switch (type) {
    case Layer_NONE: {
      return true;
    }
    case Layer_CONV_2D: {
      auto ptr = reinterpret_cast<const nn::CONV_2D *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Layer_AVERAGE_POOL_2D: {
      auto ptr = reinterpret_cast<const nn::AVERAGE_POOL_2D *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Layer_MAX_POOL_2D: {
      auto ptr = reinterpret_cast<const nn::MAX_POOL_2D *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Layer_RELU: {
      auto ptr = reinterpret_cast<const nn::RELU *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Layer_SOFTMAX: {
      auto ptr = reinterpret_cast<const nn::SOFTMAX *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Layer_FULLY_CONNECTED: {
      auto ptr = reinterpret_cast<const nn::FULLY_CONNECTED *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Layer_ADD: {
      auto ptr = reinterpret_cast<const nn::ADD *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Layer_CONCATENATION: {
      auto ptr = reinterpret_cast<const nn::CONCATENATION *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Layer_DEPTHWISE_CONV_2D: {
      auto ptr = reinterpret_cast<const nn::DEPTHWISE_CONV_2D *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Layer_BATCH_TO_SPACE_ND: {
      auto ptr = reinterpret_cast<const nn::BATCH_TO_SPACE_ND *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Layer_SPACE_TO_BATCH_ND: {
      auto ptr = reinterpret_cast<const nn::SPACE_TO_BATCH_ND *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Layer_STRIDED_SLICE: {
      auto ptr = reinterpret_cast<const nn::STRIDED_SLICE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Layer_MUL: {
      auto ptr = reinterpret_cast<const nn::MUL *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Layer_DEQUANTIZE: {
      auto ptr = reinterpret_cast<const nn::DEQUANTIZE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Layer_LOCAL_RESPONSE_NORMALIZATION: {
      auto ptr = reinterpret_cast<const nn::LOCAL_RESPONSE_NORMALIZATION *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Layer_TANH: {
      auto ptr = reinterpret_cast<const nn::TANH *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Layer_FLOOR: {
      auto ptr = reinterpret_cast<const nn::FLOOR *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Layer_LOGISTIC: {
      auto ptr = reinterpret_cast<const nn::LOGISTIC *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Layer_PRELU: {
      auto ptr = reinterpret_cast<const nn::PRELU *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Layer_POW: {
      auto ptr = reinterpret_cast<const nn::POW *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Layer_NEG: {
      auto ptr = reinterpret_cast<const nn::NEG *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Layer_MINIMUM: {
      auto ptr = reinterpret_cast<const nn::MINIMUM *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Layer_MAXIMUM: {
      auto ptr = reinterpret_cast<const nn::MAXIMUM *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Layer_LOG: {
      auto ptr = reinterpret_cast<const nn::LOG *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Layer_ABS: {
      auto ptr = reinterpret_cast<const nn::ABS *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Layer_EXP: {
      auto ptr = reinterpret_cast<const nn::EXP *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Layer_SUB: {
      auto ptr = reinterpret_cast<const nn::SUB *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyLayerVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyLayer(
        verifier,  values->Get(i), types->GetEnum<Layer>(i))) {
      return false;
    }
  }
  return true;
}

inline const nn::Graph *GetGraph(const void *buf) {
  return flatbuffers::GetRoot<nn::Graph>(buf);
}

inline const nn::Graph *GetSizePrefixedGraph(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<nn::Graph>(buf);
}

inline bool VerifyGraphBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<nn::Graph>(nullptr);
}

inline bool VerifySizePrefixedGraphBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<nn::Graph>(nullptr);
}

inline void FinishGraphBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<nn::Graph> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGraphBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<nn::Graph> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace nn

#endif  // FLATBUFFERS_GENERATED_GNT_NN_H_
